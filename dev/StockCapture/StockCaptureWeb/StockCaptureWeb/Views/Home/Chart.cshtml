@using StockCapture.ViewModels;
@model StockQuoteViewModel

<!-- load flotr2 charting library -->
<!--[if IE]>
<script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/Flotr2/flotr2.ie.min.js")"></script>
<![endif]-->
<script src="@Url.Content("~/Scripts/Flotr2/flotr2.js")" type="text/javascript"> </script>


<h3>Chart</h3>


<style type="text/css">
    #chart {
        width: 1024px;
        height: 500px;
    }
</style>

<div id="chart"></div>

<script type="text/javascript">
    
    function InitChart() {
        $.ajax(
        {
            type: "POST",
            url: "GetChartData",
            data: { },
            loadingShow: false,
            success: function (result) {
                DrawChart(document.getElementById("chart"), result.chartData);
            }
        });
    }

    function DrawChart(container, chartData) {

        var
            d1 = chartData || [],
            //start = new Date("2009/01/01 01:00").getTime(),
            //start = new Date().getTime(),
            options,
            graph,
            i, x, o;

        //for (i = 0; i < 100; i++) {
        //    x = start + (i*60*60);
        //    //d1.push([x, i + Math.random() * 30 + Math.sin(i / 20 + Math.random() * 2) * 20 + Math.sin(i / 10 + Math.random()) * 10]);
        //    d1.push([x, i/100.0]);
        //}

        console.log(chartData);
        for (var j = 0; j < chartData.length; j++) {
            var subArray = chartData[j];
            var date = new Date(subArray[0]);
            var offset = date.getTimezoneOffset() / 60;
            var hours = date.getHours();
            date.setHours(hours - offset);
            subArray[0] = date;
        }

        options = {
            xaxis: {
                mode: 'time',
                labelsAngle: 45
            },
            selection: {
                mode: 'x'
            },
            HtmlText: false,
            title: 'Time'
        };

        // Draw graph with default options, overwriting with passed options
        function drawGraph(opts) {

            // Clone the options, so the 'options' variable always keeps intact.
            o = Flotr._.extend(Flotr._.clone(options), opts || {});

            // Return a new graph.
            return Flotr.draw(
                container,
                [d1],
                o
            );
        }

        graph = drawGraph();

        Flotr.EventAdapter.observe(container, 'flotr:select', function (area) {
            // Draw selected area
            graph = drawGraph({
                xaxis: { min: area.x1, max: area.x2, mode: 'time', labelsAngle: 45 },
                yaxis: { min: area.y1, max: area.y2 }
            });
        });

        // When graph is clicked, draw the graph with default area.
        Flotr.EventAdapter.observe(container, 'flotr:click', function () { graph = drawGraph(); });
    }

    jQuery(document).ready(function () {
        InitChart();
    });
</script>




