@{ Layout = "~/Views/Shared/_Layout_Raw.cshtml"; }

@using StockCapture.ViewModels;
@model StockQuoteViewModel

<!-- load flotr2 charting library -->
<!--[if IE]>
<script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/Flotr2/flotr2.ie.min.js")"></script>
<![endif]-->
<script src="@Url.Content("~/Scripts/Flotr2/flotr2.js")" type="text/javascript"> </script>

<style type="text/css">
    
    #chart {
        width: 1024px;
        height: 500px;
    }

    .chart-tooltip {
        font-weight: bold;
    }
    .chart-tooltip .val {
        color: yellow;
    }
    .chart-tooltip .time {
        color: white;
        margin-left: 20px;
    }
</style>

<div id="chart"></div>

<script type="text/javascript">

    var _chartData = null;
    var _areas = [200];
    var _areaIndex = 0;
    _areas[_areaIndex] = null;

    function InitChart() {

        $(window).resize(function () {
            ResizeChart();
        });

        $(window).click(function (e) {
            if(e.toElement == document.body)
                ReloadChart();
        });

        ReloadChart();
    }

    function ReloadChart() {
        $.ajax(
        {
            type: "POST",
            url: "GetChartData",
            data: { },
            loadingShow: false,
            success: function (result) {
                SetChartData(result.chartData);

                ResizeChart();

                setTimeout(function () {
                    ReloadChart();
                }, 5000);
            }
        });
    }

    function SetChartData(chartData) {
        //console.log(chartData);
        for (var j = 0; j < chartData.length; j++) {
            var subArray = chartData[j];
            var date = new Date(subArray[0]);
            var offset = date.getTimezoneOffset() / 60;
            var hours = date.getHours();
            date.setHours(hours - offset);
            subArray[0] = date;
        }

        _chartData = chartData;
        if (_areaIndex == 0)
            return;

        // Expand zoomed area to the new bounds at right hand side:
        var area = _areas[_areaIndex];

        var newLastDateInPixel = Flotr.toPixel(_chartData[_chartData.length - 1][0]);

        //console.log(newLastDateInPixel);
        //console.log(area.x2 + "*");
        //var fac = (Math.abs(area.x2) < Math.abs(newLastDateInPixel) ? Math.abs(area.x2) / Math.abs(newLastDateInPixel) : Math.abs(newLastDateInPixel) / Math.abs(area.x2));
        //console.log(fac);

        //if (fac > 0.95)
            area.x2 = newLastDateInPixel;
    }

    function ResizeChart() {
        var screenWidth = $(window).width() - 20;
        var screenHeight = $(window).height();

        $("#chart").css("width", screenWidth);
        $("#chart").css("height", screenHeight);

        if (_chartData != null)
            DrawChart(document.getElementById("chart"));
    }

    function DrawChart(container) {

        var d1 = _chartData || [], options, graph, o;

        options = {
            xaxis: {
                mode: 'time',
                labelsAngle: 45
            },
            selection: {
                mode: 'x'
            },
            mouse: {
                track: true,
                position: 'nw',
                trackFormatter: function(obj) {
                    var dt = obj.x;
                    var ofs = dt.getTimezoneOffset() / 60;
                    return "<span class=\"chart-tooltip\">"
                        + "<span class=\"val\">" + obj.y.replace('.', ',') + "</span>"
                        + "<span class=\"time\">" + leadingZero(dt.getHours() + ofs) + ":" + leadingZero(dt.getMinutes()) + ":" + leadingZero(dt.getSeconds()) + "</span>"
                        + "</span>";
                },
                relative: true
            },
            HtmlText: false,
            title: 'Time'
        };

        function leadingZero(v) {
            if (v < 10)
                return "0" + v;

            return "" + v;
        }

        // Draw graph with default options, overwriting with passed options
        function drawGraph(opts) {

            // Clone the options, so the 'options' variable always keeps intact.
            o = Flotr._.extend(Flotr._.clone(options), opts || {});

            // Return a new graph.
            return Flotr.draw(
                container,
                [d1],
                o
            );
        }

        function drawGraphZoomed() {
            if (_areaIndex == 0) 
                return drawGraph();

            var area = _areas[_areaIndex];

            //console.log("pop: " + _areaIndex + " ~ " + area.x1 + " - " + new Date());
            return drawGraph({
                xaxis: { min: area.x1, max: area.x2, mode: 'time', labelsAngle: 45 },
                yaxis: { min: area.y1, max: area.y2 }
            });
        }

        graph = drawGraphZoomed(options);

        Flotr.EventAdapter.observe(container, 'flotr:select', function (area) {
            // Draw selected area
            graph = drawGraph({
                xaxis: { min: area.x1, max: area.x2, mode: 'time', labelsAngle: 45 },
                yaxis: { min: area.y1, max: area.y2 }
            });
            _areas[++_areaIndex] = area;
            //console.log("push: " + _areaIndex + " ~ " + area.x1 + " - " + new Date());
        });

        // When graph is clicked, draw the graph with default area.
        Flotr.EventAdapter.observe(container, 'flotr:click', function() {

            if (_areaIndex == 0) 
                return;

            --_areaIndex;

            graph = drawGraphZoomed();
        });
    }

    jQuery(document).ready(function () {
        InitChart();
    });
</script>




