@using CkgDomainLogic.Autohaus.Models
@using CkgDomainLogic.DomainCommon.Models
@using CkgDomainLogic.Fahrzeugbestand.Models
@using GeneralTools.Models;

@model Fahrzeugdaten

@{
    var isMassenzulassung = Convert.ToBoolean(ViewData["IsMassenzulassung"]) || Convert.ToBoolean(Request["IsMassenzulassung"]);    // MMA Info, ob Massenzulassung oder nicht, wird mit InputForm "IsMassenzulassung" über Ajax.BeginForm hinweg durchgeschleift
    var isMassenabmeldung = Convert.ToBoolean(ViewData["IsMassenabmeldung"]) || Convert.ToBoolean(Request["IsMassenabmeldung"]);
    var modusAbmeldung = Convert.ToBoolean(ViewData["ModusAbmeldung"]) || Convert.ToBoolean(Request["ModusAbmeldung"]);

    if (isMassenzulassung) { Model.FahrgestellNr = "MASSENZULASSUNG"; }
    if (isMassenabmeldung) { Model.FahrgestellNr = "MASSENABMELDUNG"; }

    var fahrzeugfarbenList = (List<Domaenenfestwert>)ViewData["FahrzeugfarbenList"];
}

<style>
    .fontUnderline {
        text-decoration: underline;
    }

    .inputwidth {
        width: 100px;
    }

    .fahrzeug-daten {
        float: left;
        width: 50%;
        margin-left: 0;
    }

    .kroschke-prime-etikette {
        display: inline-block;
        background: url(/ServicesMvc/images/kroschke-prime-etikette.png);
        width: 350px;
        height: 64px;
        vertical-align:top;
    }
    .kroschke-prime-etikette-more {
        margin: 19px 0 0 15px;
        vertical-align:top;
        width: 40px;
    }

    .kroschke-prime-etikette-form {
        background: url(/ServicesMvc/images/kroschke-prime-etikette-bg.png);
        margin: 19px 0 20px 15px;
        padding: 15px 10px 10px 25px;
        border: 3px solid #C21823;
        border-radius: 32px !important;
        box-shadow: 5px 5px 20px -1px rgba(0,0,0,0.75)!important;
        width: 360px;
    }
    .kroschke-signs-services {
        display: inline-block;
        background: url(/ServicesMvc/images/kroschke-signs-services.png);
        width: 346px;
        height: 33px;
        vertical-align:top;
        margin: 0 0 10px 0;
    }
    .kroschke-prime-etikette-form .control-group {
        margin-bottom: 0!important;
    }
    .kroschke-prime-etikette-form .control-label {
        width: 150px !important;
        text-align: left;
    }
    .kroschke-prime-etikette-form .controls {
        margin-left: 160px !important;
    }
    .kroschke-prime-etikette-form .controls input {
        width: 170px !important;
        font-weight: bold;
        border-color: #a0a0a0 !important;
        border-radius: 7px !important;
        background-color: ivory;
    }
    .kroschke-prime-etikette-form .controls input.no-border-bottom:not(.input-validation-error){
        border-bottom: 0 !important;
    }
    
</style>

<script>

    _modelIsValid = @ViewContext.ViewData.ModelState.IsValid.ToString().ToLower();

    var _selectedItemsCount = 0;

    function ToggleCheckHasEtikett(btn) {
        var isChecked = $("#HasEtikett").is(":checked");
        $("#HasEtikett").attr("checked", !isChecked);
        $.uniform.update($("#HasEtikett"));

        var btnIcon = btn.find("i");
        if (!isChecked) {
            btnIcon.removeClass("icon-chevron-right");
            btnIcon.addClass("icon-chevron-down");
        } else {
            btnIcon.removeClass("icon-chevron-down");
            btnIcon.addClass("icon-chevron-right");
        }
        
        ShowHideKennzLabelDiv();

        return false;
    }

    function TrackFin(tb) {
        var val = tb.val();

        $(".kroschke-prime-etikette-form span[id='FahrgestellNr']").html(val);
    }

    function AjaxFormFahrzeugdatenComplete() {
        FormPrepareAjax();
        if (_modelIsValid) {
            AjaxRequestNextStep();
            return;
        }
    }

    function OnSelectionChange_GridFahrzeugAuswahl(cb) {
        Grid_FormatMultiRowSelected(cb);
        $.ajax({
            type: "POST",
            url: "FahrzeugAuswahlSelectionChanged",
            data: { vinId: cb.val(), isChecked: cb.is(':checked') },
            loadingShow: false,
            success: function (result) {
                UpdateGridInfo(result.allSelectionCount);
            }
        });
    }

    function OnAllSelectionChange_GridFahrzeugAuswahl(check) {
        $.ajax({
            type: "POST",
            url: "FahrzeugAuswahlSelectionChanged",
            data: { vinId: "", isChecked: check },
            loadingShow: true,
            success: function (result) {
                UpdateGridInfo(result.allSelectionCount);
                FilterGrid("GridFahrzeugAuswahl");
            }
        });
    }

    function UpdateGridInfo(count) {
        if (count == 0) {
            $("#FahrzeugAuswahlCount").addClass('hide');
            $("#uncheckAllRecords").attr("checked", false);
            $.uniform.update($("#uncheckAllRecords"));
            return;
        }
        $("#FahrzeugAuswahlCount").removeClass('hide');
        $("#FahrzeugAuswahlCount > span").html('Sie haben ' + count + ' Fahrzeug' + (count == 1 ? '' : 'e') + ' ausgewählt!');
        $("#uncheckAllRecords").attr("checked", true);
        $.uniform.update($("#uncheckAllRecords"));
    }

    function OnDataBound_GridFahrzeugAuswahl() {
        FilteredData_Grid_OnDataBound($(this));
        $('.tooltips').tooltip();
        // prepare multi row selection
        App.initUniform();
        Grid_PrepareMultiRowSelected("GridFahrzeugAuswahl");
        InitDefaultColorAutocomplete($(".colorautocomplete"));
    }
    function OnRowDataBound_GridFahrzeugAuswahl(e) {
        $(e.row).addClass((e.row.sectionRowIndex % 2 == 0) ? "t-grid-selected" : "t-grid-selected-alt");
        ShowHideKennzLabelColumns();
    }

    function ShowHideKennzLabelDiv() {
        var isSelected = $('#HasEtikett').is(':checked');
        var divObj = $('#KennzeichenLabelFields');

        if (isSelected) {
            divObj.removeClass("hidden");
        } else {
            divObj.addClass("hidden");
        }
    }

    function ShowHideKennzLabelColumns() {
        var isSelected = $('#HasEtikett').is(':checked');
        var grid = $("#GridFahrzeugAuswahl").data("tGrid");
        if (isSelected) {
            grid.showColumn("FzgModell");
            grid.showColumn("Farbe");
        } else {
          grid.hideColumn("FzgModell");
          grid.hideColumn("Farbe");
        }
    }

    function InitDefaultColorAutocomplete(tb) {
        var items = @Html.Raw(Json.Encode(fahrzeugfarbenList.ToList().Select(a => a.Beschreibung.ToJavascriptString())));

        tb.autocomplete({
            minLength: 0,
            source: items,
            create: function () {
                    $(this).data('ui-autocomplete')._renderItem = function (ul, item) {
                        return $('<li>')
                            .append('<a>' + FromJavascriptString(item.label) + '</a>')
                            .appendTo(ul);
                        };
                }
            })
            .focus(function(){
                if ($(this).attr('state') != 'open') {
                    $(this).autocomplete("search");
                }
            })
            .blur(function() {
                // Da Click auf Defaultfarbe das Feld nicht auf "dirty" setzt und somit auch der onChance-Event nicht ausgelöst wird, hier manuelle Verarbeitung...
                var oldValue = $(this).data("oldValue");
                var newValue = $(this).val();
                if (oldValue != newValue) {
                    var tr = $(this).closest('tr');
                    var grid = $("#GridFahrzeugAuswahl").data("tGrid");
                    var dataItem = grid.dataItem(tr);
                    var finId = dataItem["FinID"];
                    var field = $(this).data('fieldname');
                    var value = $(this).val();
                    SetFinValue(finId, field, value);
                }
                $(this).data("oldValue",$(this).val());
            });
        tb.on("autocompleteselect", function (e, ui) {
            e.preventDefault();

            this.value = FromJavascriptString(ui.item.label);
        });
    }


    // Änderung eines Fahrzeugparameters bei Massenzulassung
    $(document).off('change', '.editvinvalue');
    $(document).on('change', '.editvinvalue', function () {            // Auswirkung auf ein Fahrzeug
        var tr = $(this).closest('tr');
        var grid = $("#GridFahrzeugAuswahl").data("tGrid");
        var dataItem = grid.dataItem(tr);
        var finId = dataItem["FinID"];
        var field = $(this).data('fieldname');
        var value = $(this).val();
        SetFinValue(finId, field, value);
    });

    $(function() {
        ShowHideKennzLabelDiv();
        InitDefaultColorAutocomplete($(".colorautocomplete"));
        GridAllColumnFilterApplyToGrid("GridFahrzeugAuswahl");

        $('#Farbe').show(); // Workaround
    });

</script>

<div id="DivFahrzeugdaten" class="margin-top-20">
    @using (Ajax.BeginForm("FahrzeugdatenForm", "Zulassung", null,
                                           new MvcAjaxOptions { UpdateTargetId = "DivFahrzeugdaten", OnComplete = "AjaxFormFahrzeugdatenComplete();" },
                                           htmlAttributes: new { @class = "form-horizontal", id = "AjaxFormFahrzeugdaten" }))
    {
        @Html.FormValidationSummary()

        if (isMassenzulassung || isMassenabmeldung)
        {
            @Html.Hidden("IsMassenzulassung", isMassenzulassung)
            @Html.Hidden("IsMassenabmeldung", isMassenabmeldung)
            @Html.HiddenFor(m => m.Zb2Nr)
            @Html.HiddenFor(m => m.TuevAu)
            @Html.HiddenFor(m => m.FahrgestellNr)

            @Html.FormTextBoxFor(m => m.AuftragsNr, new { @class = "m-wrap medium uppercase", col = "left" })
            @Html.FormTextBoxFor(m => m.VerkaeuferKuerzel, new { @class = "m-wrap small", col = "right" })

            @Html.FormTextBoxFor(m => m.BestellNr, new { @class = "m-wrap medium uppercase", col = "left" })
            @Html.FormTextBoxFor(m => m.Kostenstelle, new { @class = "m-wrap small uppercase", col = "right" })

            @Html.FormDropDownListFor(m => m.FahrzeugartId, Fahrzeugdaten.FahrzeugartList.ToSelectList(), new { @class = "m-wrap small" })

            @Html.FormCheckBoxFor(m => m.HasEtikett, new { @class = "m-wrap", onChange = "ShowHideKennzLabelColumns();" })
        }
        else
        {
            <div class="span6 form-horizontal fahrzeug-daten" id="fahrzeug-daten-left">
                
                @Html.FormTextBoxFor(m => m.AuftragsNr, new {@class = "m-wrap medium uppercase"})
                @Html.FormDropDownListFor(m => m.FahrzeugartId, Fahrzeugdaten.FahrzeugartList.ToSelectList(), new {@class = "m-wrap small"})

                @Html.FormTextBoxFor(m => m.VerkaeuferKuerzel, new {@class = "m-wrap small"})
                @Html.FormTextBoxFor(m => m.FahrgestellNr, new {onkeyup = "TrackFin($(this))", @class = "m-wrap medium uppercase", maxlength = 17})

                @Html.FormTextBoxFor(m => m.BestellNr, new {@class = "m-wrap medium uppercase"})
                @Html.FormTextBoxFor(m => m.Zb2Nr, new {@class = "m-wrap medium uppercase"})

                @if (modusAbmeldung)
                {
                    @Html.FormTextBoxFor(m => m.Kostenstelle, new {@class = "m-wrap medium uppercase"})
                    @Html.FormTextBoxFor(m => m.TuevAu, new {@class = "m-wrap small", maxlength = 4})
                }
                else
                {
                    @Html.FormTextBoxFor(m => m.Kostenstelle, new {@class = "m-wrap medium uppercase"})
                }

            </div>

            <div class="span5 form-horizontal fahrzeug-daten" id="fahrzeug-daten-right">

                <div class="kroschke-prime-etikette">&nbsp;</div>
                <button onclick="return ToggleCheckHasEtikett($(this))" class="btn green kroschke-prime-etikette-more"><i class="icon-chevron-right"></i></button>

                <div class="hide">
                    @Html.FormCheckBoxFor(m => m.HasEtikett, new { @class = "m-wrap", onChange = "ShowHideKennzLabelDiv();" })
                </div>
                <div id="ValidationMsgHasEtikett"></div>
                <div id="KennzeichenLabelFields" class="kroschke-prime-etikette-form">
                    <div class="kroschke-signs-services"></div>
                    @Html.FormTextBlockFor(m => m.KennzeichenHinweis, new { @class = "m-wrap medium" })
                    @Html.FormTextBlockFor(m => m.HalterName, new { @class = "m-wrap medium" })

                    @Html.FormTextBoxFor(m => m.FzgModell, new {@class = "m-wrap medium no-border-bottom"})
                    @Html.FormTextBoxFor(m => m.Farbe, new { @class = "m-wrap medium colorautocomplete" })

                    @Html.FormTextBlockFor(m => m.FahrgestellNr, new { @class = "m-wrap medium" })

                    <div class="margin-top-5"></div>

                    @Html.FormTextBlockFor(m => m.AgName, new { @class = "m-wrap medium" }, labelText: @Model.AgKundenNr)
                </div>

            </div>
        }
    }

    @if (isMassenzulassung || isMassenabmeldung)
    {
        using (@Html.PortletBox("Fahrzeugauswahl", "icon-table", "light-grey", false))
        {
            <h4>
                <span id="FahrzeugAuswahlCount" class="alert alert-success margin-left-15 hide">
                    <i class="icon-check"></i><span class="padding-left-5 bold"></span>
                </span>
            </h4>
            var gridName = "GridFahrzeugAuswahl";
            @(Html.Telerik()
                      .Grid<FahrzeugAkteBestand>()
                      .Name(gridName)
                      .XAjaxDataBinding("FahrzeugAuswahlAjaxBinding", "Zulassung")    // Vorausgewählte Fahrzeugliste anzeigen
                      .Columns(columns =>
                      {
                          columns.XBound(c => c.FinID).Visible(false);
                          columns.XBound(c => c.Aktion)
                              .ClientTemplate("<input type='checkbox' name='checkedRecords' <# if (data.IsSelected) { #> checked <# } #> value='<#= data.FinID #>' onchange='OnSelectionChange_GridFahrzeugAuswahl($(this))' />")
                              .HeaderTemplate(
                                  "<span class='tooltips' data-original-title='" + Localize.MultiSelectCheckAllFilteredItems + "' data-placement='right'><input type='checkbox' id='checkAllRecords' onchange='OnAllSelectionChange_GridFahrzeugAuswahl(true)' /></span>" +
                                  "<i class='icon-remove cursor-pointer tooltips' data-original-title='" + Localize.MultiSelectUncheckAllFilteredItems + "' data-placement='right' id='uncheckAllRecords' onclick='OnAllSelectionChange_GridFahrzeugAuswahl(false)'></i>"
                          ).Filterable(false);
                          columns.XBound(c => c.FIN);
                          columns.XBound(c => c.HandelsName);
                          columns.XBound(c => c.FahrzeugArt);

                          columns.XBound(c => c.FzgModell).ClientTemplate("<input id='FzModell_<#= data.FIN #>' type='text' class='editvinvalue etikettcol' data-fieldname='FzgModell' value='<#= data.FzgModell #>' />").Title("Modell <span class='requiredField requiredFieldMarker'>*</span>");
                          columns.XBound(c => c.Farbe).ClientTemplate("<input id='Farbe_<#= data.FIN #>' type='text' class='inputwidth colorautocomplete etikettcol' data-fieldname='Farbe' value='<#= data.Farbe #>' />").Title("Farbe <span class='requiredField requiredFieldMarker'>*</span>");

                      })
                      .XPageSize(10)
                      .XAutoColumnConfiguration()
                      .ClientEvents(events => events.OnDataBound("OnDataBound_" + gridName).OnRowDataBound("OnRowDataBound_" + gridName))
                      .XSort(sortOrder => sortOrder.Add(c => c.FIN).Ascending())
                      .XToolBar(gridName)
            )
        }
    }

</div>
