@using CkgDomainLogic.Autohaus.Models
@using CkgDomainLogic.DomainCommon.Models
@using CkgDomainLogic.Fahrzeugbestand.Models
@using GeneralTools.Models;

@model Fahrzeugdaten
@{
    var isMassenzulassung = Convert.ToBoolean(ViewData["IsMassenzulassung"]) || Convert.ToBoolean(Request["IsMassenzulassung"]);    // MMA Info, ob Massenzulassung oder nicht, wird mit InputForm "IsMassenzulassung" über Ajax.BeginForm hinweg durchgeschleift
    var isMassenabmeldung = Convert.ToBoolean(ViewData["IsMassenabmeldung"]) || Convert.ToBoolean(Request["IsMassenabmeldung"]);
    var modusAbmeldung = Convert.ToBoolean(ViewData["ModusAbmeldung"]) || Convert.ToBoolean(Request["ModusAbmeldung"]);

    if (isMassenzulassung) { Model.FahrgestellNr = "MASSENZULASSUNG"; }
    if (isMassenabmeldung) { Model.FahrgestellNr = "MASSENABMELDUNG"; }

    var fahrzeugfarbenList = (List<Domaenenfestwert>)ViewData["FahrzeugfarbenList"];  
}

<style>
    
     .fontUnderline {
         text-decoration: underline;
     }

    .inputwidth {
        width: 100px;
    }
    
    .m-wrap.tiny {
        width: 30px !Important;
    }
</style>

<script>

    _modelIsValid = @ViewContext.ViewData.ModelState.IsValid.ToString().ToLower();

    var _selectedItemsCount = 0;

    function AjaxFormFahrzeugdatenComplete() {
        FormPrepareAjax();
        if (_modelIsValid) {
            AjaxRequestNextStep();
            return;
        }
    }

    function OnDataBound_GridFahrzeugAuswahl() {
        FilteredData_Grid_OnDataBound($(this));
        $('.tooltips').tooltip();
        // prepare multi row selection
        App.initUniform();
        Grid_PrepareMultiRowSelected("GridFahrzeugAuswahl");
        InitDefaultColorAutocomplete($(".colorautocomplete"));
    }
    function OnRowDataBound_GridFahrzeugAuswahl(e) {
        $(e.row).addClass((e.row.sectionRowIndex % 2 == 0) ? "t-grid-selected" : "t-grid-selected-alt");
        $(e.row).find("#FahrzeugArt").val(e.dataItem.FahrzeugArt);
        ShowHideKennzLabelColumns();
    }

    function ShowHideKennzLabelDiv() {
        var isSelected = $('#HasEtikett').is(':checked');
        var divObj = $('#KennzeichenLabelFields');

        if (isSelected) {
            divObj.removeClass("hidden");
        } else {
            divObj.addClass("hidden");
        }
    }

    function ShowHideKennzLabelColumns() {
        var isSelected = $('#HasEtikett').is(':checked');
        var grid = $("#GridFahrzeugAuswahl").data("tGrid");
        if (isSelected) {
            grid.showColumn("FzgModell");
            grid.showColumn("Farbe");
        } else {
          grid.hideColumn("FzgModell");
          grid.hideColumn("Farbe");
        }
    }

    function InitDefaultColorAutocomplete(tb) {
        var items = @Html.Raw(Json.Encode(fahrzeugfarbenList.ToList().Select(a => a.Beschreibung.ToJavascriptString())));

        tb.autocomplete({
            minLength: 0,
            source: items,
            create: function () {
                    $(this).data('ui-autocomplete')._renderItem = function (ul, item) {
                        return $('<li>')
                            .append('<a>' + FromJavascriptString(item.label) + '</a>')
                            .appendTo(ul);
                        };
                }
            })
            .focus(function(){
                if ($(this).attr('state') != 'open') {
                    $(this).autocomplete("search");
                }
            })
            .blur(function() {
                // Da Click auf Defaultfarbe das Feld nicht auf "dirty" setzt und somit auch der onChance-Event nicht ausgelöst wird, hier manuelle Verarbeitung...
                var oldValue = $(this).data("oldValue");
                var newValue = $(this).val();
                if (oldValue != newValue) {
                    var tr = $(this).closest('tr');
                    var grid = $("#GridFahrzeugAuswahl").data("tGrid");
                    var dataItem = grid.dataItem(tr);
                    var finId = dataItem["FinID"];
                    var field = $(this).data('fieldname');
                    var value = $(this).val();
                    SetFinValue(finId, field, value);
                }
                $(this).data("oldValue",$(this).val());
            });
        tb.on("autocompleteselect", function (e, ui) {
            e.preventDefault();

            this.value = FromJavascriptString(ui.item.label);
        });
    }

    function ZulassungVehicleAdd() {
        var numberOfVehiclesToAdd = $("#AnzahlHinzuzufuegendeFahrzeuge").val();

        if (!numberOfVehiclesToAdd || numberOfVehiclesToAdd == 0)
            return;

        $.ajax({
            type: "POST",
            url: "VehicleAdd",
            data: { anzFahrzeuge: numberOfVehiclesToAdd },
            loadingShow: false,
            success: function (result) {
                if (result.ok == true) {
                    var grid = $("#GridFahrzeugAuswahl").data("tGrid");
                    grid.ajaxRequest();
                }
                if (result.ok == false) {
                    alert(result.message);
                }
            }
        });
    }

    function ZulassungVehicleRemove(finId) {
        $.ajax({
            type: "POST",
            url: "VehicleRemove",
            data: { finId: finId },
            loadingShow: false,
            success: function (result) {
                if (result.ok == true) {
                    var grid = $("#GridFahrzeugAuswahl").data("tGrid");
                    grid.ajaxRequest();
                }
                if (result.ok == false) {
                    alert(result.message);
                }
            }
        });

        return false;
    }

    // Änderung eines Fahrzeugparameters bei Massenzulassung
    $(document).off('change', '.editvinvalue');
    $(document).on('change', '.editvinvalue', function () {            // Auswirkung auf ein Fahrzeug
        var tr = $(this).closest('tr');
        var grid = $("#GridFahrzeugAuswahl").data("tGrid");
        var dataItem = grid.dataItem(tr);
        var finId = dataItem["FinID"];
        var field = $(this).data('fieldname');
        var value = $(this).val();
        SetFinValue(finId, field, value);
    });

    $(function() {
        ShowHideKennzLabelDiv();
        InitDefaultColorAutocomplete($(".colorautocomplete"));
        GridAllColumnFilterApplyToGrid("GridFahrzeugAuswahl");

        $('#Farbe').show(); // Workaround
    });

</script>

<div id="DivFahrzeugdaten" class="margin-top-20">    
    @using (Ajax.BeginForm("FahrzeugdatenForm", "Zulassung", null,
                           new MvcAjaxOptions { UpdateTargetId = "DivFahrzeugdaten", OnComplete = "AjaxFormFahrzeugdatenComplete();" },
                           htmlAttributes: new { @class = "form-horizontal", id = "AjaxFormFahrzeugdaten" }))
    {
        @Html.FormValidationSummary()
        
        if (isMassenzulassung || isMassenabmeldung)
        {
            @Html.Hidden("IsMassenzulassung", isMassenzulassung)
            @Html.Hidden("IsMassenabmeldung", isMassenabmeldung)
            @Html.HiddenFor(m => m.Zb2Nr)
            @Html.HiddenFor(m => m.TuevAu)
            @Html.HiddenFor(m => m.FahrgestellNr)

            @Html.FormTextBoxFor(m => m.AuftragsNr, new { @class = "m-wrap medium uppercase", col = "left" })
            @Html.FormTextBoxFor(m => m.VerkaeuferKuerzel, new { @class = "m-wrap small", col = "right" })

            @Html.FormTextBoxFor(m => m.BestellNr, new { @class = "m-wrap medium uppercase", col = "left" })
            @Html.FormTextBoxFor(m => m.Kostenstelle, new { @class = "m-wrap small uppercase", col = "right" })
            
            @Html.FormDropDownListFor(m => m.FahrzeugartId, Fahrzeugdaten.FahrzeugartList.ToSelectList(), new { @class = "m-wrap small" })

            @Html.FormCheckBoxFor(m => m.HasEtikett, new { @class = "m-wrap", onChange = "ShowHideKennzLabelColumns();" })
        }
        else
        {
            @Html.FormTextBoxFor(m => m.AuftragsNr, new { @class = "m-wrap medium uppercase", col = "left" })
            @Html.FormDropDownListFor(m => m.FahrzeugartId, Fahrzeugdaten.FahrzeugartList.ToSelectList(), new { @class = "m-wrap small", col = "right" })

            @Html.FormTextBoxFor(m => m.VerkaeuferKuerzel, new { @class = "m-wrap small", col = "left" })
            @Html.FormTextBoxFor(m => m.FahrgestellNr, new { @class = "m-wrap medium uppercase", maxlength = 17, col = "right" })

            @Html.FormTextBoxFor(m => m.BestellNr, new { @class = "m-wrap medium uppercase", col = "left" })
            @Html.FormTextBoxFor(m => m.Zb2Nr, new { @class = "m-wrap medium uppercase", col = "right" })

            if (modusAbmeldung)
            {
                @Html.FormTextBoxFor(m => m.Kostenstelle, new { @class = "m-wrap medium uppercase", col = "left" })
                @Html.FormTextBoxFor(m => m.TuevAu, new { @class = "m-wrap small", maxlength = 4, col = "right" })
            }
            else
            {
                @Html.FormTextBoxFor(m => m.Kostenstelle, new { @class = "m-wrap medium uppercase" })
            }
            
            @Html.FormCheckBoxFor(m => m.HasEtikett, new { @class = "m-wrap", onChange = "ShowHideKennzLabelDiv();" })
            <div id="ValidationMsgHasEtikett"></div>
            <div id="KennzeichenLabelFields">
                @Html.FormTextBoxFor(m => m.Farbe, new { @class = "m-wrap medium colorautocomplete", col = "left" })
                @Html.FormTextBoxFor(m => m.FzgModell, new { @class = "m-wrap medium", col = "right" })
            </div>
        }
    }
    
    @if (isMassenzulassung || isMassenabmeldung)
    {
        using (@Html.PortletBox("Fahrzeugauswahl", "icon-table", "light-grey", false))
        {
            var gridName = "GridFahrzeugAuswahl";
            
            @(Html.Telerik()
                    .Grid<FahrzeugAkteBestand>()
                    .Name(gridName)
                    .XAjaxDataBinding("FahrzeugAuswahlAjaxBinding", "Zulassung")    // Fahrzeugliste anzeigen
                    .Columns(columns =>
                    {
                        columns.XBound(c => c.FinID).Visible(false);

                        columns.XBound(c => c.Aktion).Filterable(false).ClientTemplate(
                            "<button onclick='return ZulassungVehicleRemove(\"<#= data.FinID #>\");' class='btn mini gray tooltips' data-original-title='" + Localize.VehicleDelete + "' data-placement='right'><i class='halflings-icon white remove'></i></button>");

                        columns.XBound(c => c.FIN).ClientTemplate(
                                Html.TextBox("FIN", "<#= data.FIN #>", new Dictionary<string, object> { { "class", "m-wrap medium uppercase editvinvalue" }, { "data-fieldname", "FIN" } }).ToHtmlString()
                            ).Title(Localize.VIN + " <span class='requiredField requiredFieldMarker'>*</span>");
                          
                        columns.XBound(c => c.HandelsName).ClientTemplate(
                                Html.TextBox("HandelsName", "<#= data.HandelsName #>", new Dictionary<string, object> { { "class", "m-wrap medium editvinvalue" }, { "data-fieldname", "HandelsName" } }).ToHtmlString()
                            );
                          
                        columns.XBound(c => c.FahrzeugArt).ClientTemplate(
                                Html.DropDownList("FahrzeugArt", FahrzeugAkteBestand.FahrzeugArtOptionen.ToSelectList(), new Dictionary<string, object> { { "class", "m-wrap small editvinvalue" }, { "data-fieldname", "FahrzeugArt" } }).ToHtmlString()
                            );

                        columns.XBound(c => c.FzgModell).ClientTemplate("<input type='text' class='editvinvalue etikettcol' data-fieldname='FzgModell' value='<#= data.FzgModell #>' />").Title(Localize.Model + " <span class='requiredField requiredFieldMarker'>*</span>");
                        columns.XBound(c => c.Farbe).ClientTemplate("<input type='text' class='inputwidth colorautocomplete etikettcol' data-fieldname='Farbe' value='<#= data.Farbe #>' />").Title(Localize.Color + " <span class='requiredField requiredFieldMarker'>*</span>");

                    })
                    .XPageSize(10)
                    .XAutoColumnConfiguration()
                    .ClientEvents(events => events.OnDataBound("OnDataBound_" + gridName).OnRowDataBound("OnRowDataBound_" + gridName))
                    .XSort(sortOrder => sortOrder.Add(c => c.FIN).Ascending())
                    .XToolBar(gridName)
                )
        
            <div class="form-actions clearfix">
                <div class="pull-left">
                    @Html.TextBoxFor(m => m.AnzahlHinzuzufuegendeFahrzeuge, new { @class = "m-wrap tiny", maxlength = 3 })
                    <button class="btn blue" onclick="ZulassungVehicleAdd();">@Localize.AddVehicleVehicles</button>
                </div>
            </div>
        }
    }
    
</div>
