@using CkgDomainLogic.Autohaus.Models
@using CkgDomainLogic.DomainCommon.Models
@using CkgDomainLogic.Fahrzeugbestand.Models
@model Fahrzeugdaten
@{
    var isMassenzulassung = Convert.ToBoolean(ViewData["IsMassenzulassung"]) || Convert.ToBoolean(Request["IsMassenzulassung"]);    // MMA Info, ob Massenzulassung oder nicht, wird mit InputForm "IsMassenzulassung" über Ajax.BeginForm hinweg durchgeschleift
    var isMassenabmeldung = Convert.ToBoolean(ViewData["IsMassenabmeldung"]) || Convert.ToBoolean(Request["IsMassenabmeldung"]);

    if (isMassenzulassung) { Model.FahrgestellNr = "MASSENZULASSUNG"; }
    if (isMassenabmeldung) { Model.FahrgestellNr = "MASSENABMELDUNG"; }

    var fahrzeugfarbenList = (List<Domaenenfestwert>)ViewData["FahrzeugfarbenList"];  
}

<style>
    .fontUnderline {
        text-decoration: underline    
    }

    .inputwidth {
        width: 100px;
    }
</style>

<script>
    
    _modelIsValid = @ViewContext.ViewData.ModelState.IsValid.ToString().ToLower();
    
    var _selectedItemsCount = 0;

    function AjaxFormFahrzeugdatenComplete() {
        FormPrepareAjax();
        if (_modelIsValid) {
            AjaxRequestNextStep();
            return;
        }
    }
   
    function OnSelectionChange_GridFahrzeugAuswahl(cb) {
        Grid_FormatMultiRowSelected(cb);
        $.ajax({
            type: "POST",
            url: "FahrzeugAuswahlSelectionChanged",
            data: { vin: cb.val(), isChecked: cb.is(':checked') },
            loadingShow: false,
            success: function (result) {
                UpdateGridInfo(result.allSelectionCount);
            }
        });
    }
    
    function OnAllSelectionChange_GridFahrzeugAuswahl(check) {        
        $.ajax({
            type: "POST",
            url: "FahrzeugAuswahlSelectionChanged",
            data: { vin: "", isChecked: check },
            loadingShow: true,
            success: function (result) {
                UpdateGridInfo(result.allSelectionCount);
                FilterGrid("GridFahrzeugAuswahl");
            }
        });
    }
    
    function UpdateGridInfo(count) {        
        if (count == 0) {
            $("#FahrzeugAuswahlCount").addClass('hide');
            $("#uncheckAllRecords").attr("checked", false);
            $.uniform.update($("#uncheckAllRecords"));
            return;
        }
        $("#FahrzeugAuswahlCount").removeClass('hide');
        $("#FahrzeugAuswahlCount > span").html('Sie haben ' + count + ' Fahrzeug' + (count == 1 ? '' : 'e') + ' ausgewählt!');
        $("#uncheckAllRecords").attr("checked", true);
        $.uniform.update($("#uncheckAllRecords"));
    }   
    
    function OnDataBound_GridFahrzeugAuswahl() {
        FilteredData_Grid_OnDataBound($(this));
        $('.tooltips').tooltip();
        // prepare multi row selection
        App.initUniform();
        Grid_PrepareMultiRowSelected("GridFahrzeugAuswahl");
        InitDefaultColorAutocomplete($(".colorautocomplete"));
    }
    function OnRowDataBound_GridFahrzeugAuswahl(e) {
        $(e.row).addClass((e.row.sectionRowIndex % 2 == 0) ? "t-grid-selected" : "t-grid-selected-alt");
        ShowHideKennzLabelColumns();
    }

    function ShowHideKennzLabelDiv() {
        var isSelected = $('#HasEtikett').is(':checked');
        var divObj = $('#KennzeichenLabelFields');
        
        if (isSelected) {
            divObj.removeClass("hidden");
        } else {
            divObj.addClass("hidden");
        }
    }       

    function ShowHideKennzLabelColumns() {
        var isSelected = $('#HasEtikett').is(':checked');
        var grid = $("#GridFahrzeugAuswahl").data("tGrid");
        if (isSelected) {
            grid.showColumn("FzgModell");
            grid.showColumn("Farbe");
        } else {
          grid.hideColumn("FzgModell");
          grid.hideColumn("Farbe");  
        }
    }

    function InitDefaultColorAutocomplete(tb) {
        var items = @Html.Raw(Json.Encode(fahrzeugfarbenList.ToList().Select(a => a.Beschreibung)));
        tb.autocomplete({ minLength: 0, source: items })
            .focus(function(){
                if ($(this).attr('state') != 'open') {
                    $(this).autocomplete("search");
                }
            })
            .blur(function() {
                // Da Click auf Defaultfarbe das Feld nicht auf "dirty" setzt und somit auch der onChance-Event nicht ausgelöst wird, hier manuelle Verarbeitung...
                var oldValue = $(this).data("oldValue");
                var newValue = $(this).val();                
                if (oldValue != newValue) {
                    var tr = $(this).closest('tr');
                    var grid = $("#GridFahrzeugAuswahl").data("tGrid");
                    var dataItem = grid.dataItem(tr);
                    var fin = dataItem["FIN"];
                    var field = $(this).data('fieldname');
                    var value = $(this).val();
                    SetFinValue(fin, field, value);
                }                
                $(this).data("oldValue",$(this).val());
            });
    }
    
    // Änderung eines Fahrzeugparameters bei Massenzulassung
    $(document).off('change', '.editvinvalue');
    $(document).on('change', '.editvinvalue', function () {            // Auswirkung auf ein Fahrzeug
        var tr = $(this).closest('tr');
        var grid = $("#GridFahrzeugAuswahl").data("tGrid");
        var dataItem = grid.dataItem(tr);
        var fin = dataItem["FIN"];
        var field = $(this).data('fieldname');
        var value = $(this).val();
        SetFinValue(fin, field, value);
    });

    $(function() {        
        ShowHideKennzLabelDiv();
        InitDefaultColorAutocomplete($(".colorautocomplete"));
        GridAllColumnFilterApplyToGrid("GridFahrzeugAuswahl");
    });
    
</script>

<div id="DivFahrzeugdaten" class="margin-top-20">    
    @using (Ajax.BeginForm("FahrzeugdatenForm", "Zulassung", null,
                           new MvcAjaxOptions { UpdateTargetId = "DivFahrzeugdaten", OnComplete = "AjaxFormFahrzeugdatenComplete();" },
                           htmlAttributes: new { @class = "form-horizontal", id = "AjaxFormFahrzeugdaten" }))
    {
        @Html.FormValidationSummary()
        
        if (isMassenzulassung || isMassenabmeldung)
        {
            @Html.Hidden("IsMassenzulassung", isMassenzulassung)
            @Html.Hidden("IsMassenabmeldung", isMassenabmeldung)
            @Html.HiddenFor(m => m.Zb2Nr, new { @class = "m-wrap medium uppercase" })
            @Html.HiddenFor(m => m.FahrgestellNr, new { @class = "m-wrap medium uppercase", maxlength = 17 })

            @Html.FormTextBoxFor(m => m.AuftragsNr, new { @class = "m-wrap medium uppercase", col = "left" })
            @Html.FormTextBoxFor(m => m.VerkaeuferKuerzel, new { @class = "m-wrap small", col = "right" })

            @Html.FormTextBoxFor(m => m.BestellNr, new { @class = "m-wrap medium uppercase", col = "left" })
        
            @Html.HiddenFor(m => m.KostenstelleVisible)
            if (Model.KostenstelleVisible)
            {
                @Html.FormTextBoxFor(m => m.Kostenstelle, new { @class = "m-wrap small uppercase", col = "right" })
            }
            
            @Html.FormDropDownListFor(m => m.FahrzeugartId, Fahrzeugdaten.FahrzeugartList.ToSelectList(), new { @class = "m-wrap small" })

            @Html.FormCheckBoxFor(m => m.HasEtikett, new { @class = "m-wrap", onChange = "ShowHideKennzLabelColumns();" }, labelHidden: true, postControlHtml: @<text><label class="checkbox">@Localize.HasEtikett</label></text>)
        }
        else
        {
            @Html.FormTextBoxFor(m => m.AuftragsNr, new { @class = "m-wrap medium uppercase", col = "left" })
            @Html.FormDropDownListFor(m => m.FahrzeugartId, Fahrzeugdaten.FahrzeugartList.ToSelectList(), new { @class = "m-wrap small", col = "right" })

            @Html.FormTextBoxFor(m => m.VerkaeuferKuerzel, new { @class = "m-wrap small", col = "left" })
            @Html.FormTextBoxFor(m => m.FahrgestellNr, new { @class = "m-wrap medium uppercase", maxlength = 17, col = "right" })

            @Html.FormTextBoxFor(m => m.BestellNr, new { @class = "m-wrap medium uppercase", col = "left" })
            @Html.FormTextBoxFor(m => m.Zb2Nr, new { @class = "m-wrap medium uppercase", col = "right" })

            @Html.HiddenFor(m => m.KostenstelleVisible)
            if (Model.KostenstelleVisible)
            {
                @Html.FormTextBoxFor(m => m.Kostenstelle, new { @class = "m-wrap medium uppercase" })
            }
            
            @Html.FormCheckBoxFor(m => m.HasEtikett, new { @class = "m-wrap", onChange = "ShowHideKennzLabelDiv();" }, labelHidden: true, postControlHtml: @<text><label class="checkbox">@Localize.HasEtikett</label></text>)
            <div id="KennzeichenLabelFields" class="">
                @Html.FormTextBoxFor(m => m.Farbe, new { @class = "m-wrap medium colorautocomplete", col = "left" })
                @Html.FormTextBoxFor(m => m.FzgModell, new { @class = "m-wrap medium", col = "right" })
            </div>
        }
    }
    
    @if (isMassenzulassung || isMassenabmeldung)
    {
        using (@Html.PortletBox("Fahrzeugauswahl", "icon-table", "light-grey", false))
        {
                <h4>
                    <span id="FahrzeugAuswahlCount" class="alert alert-success margin-left-15 hide">
                        <i class="icon-check"></i><span class="padding-left-5 bold"></span>
                    </span>
                </h4>
            var gridName = "GridFahrzeugAuswahl";
                @(Html.Telerik()
                      .Grid<FahrzeugAkteBestand>()
                      .Name(gridName)
                      .XAjaxDataBinding("FahrzeugAuswahlAjaxBinding", "Zulassung")    // Vorausgewählte Fahrzeugliste anzeigen
                      .Columns(columns =>
                      {
                          columns.XBound(c => c.Aktion)
                              .ClientTemplate("<input type='checkbox' name='checkedRecords' <# if (data.IsSelected) { #> checked <# } #> value='<#= data.FIN #>' onchange='OnSelectionChange_GridFahrzeugAuswahl($(this))' />")
                              .HeaderTemplate(
                                  "<span class='tooltips' data-original-title='" + Localize.MultiSelectCheckAllFilteredItems + "' data-placement='right'><input type='checkbox' id='checkAllRecords' onchange='OnAllSelectionChange_GridFahrzeugAuswahl(true)' /></span>" +
                                  "<i class='icon-remove cursor-pointer tooltips' data-original-title='" + Localize.MultiSelectUncheckAllFilteredItems + "' data-placement='right' id='uncheckAllRecords' onclick='OnAllSelectionChange_GridFahrzeugAuswahl(false)'></i>"
                          ).Filterable(false);
                          columns.XBound(c => c.FIN);
                          columns.XBound(c => c.HandelsName);
                          columns.XBound(c => c.FahrzeugArt);

                          columns.XBound(c => c.FzgModell).ClientTemplate("<input id='FzModell_<#= data.FIN #>' type='text' class='editvinvalue etikettcol' data-fieldname='FzgModell' value='<#= data.FzgModell #>' />");
                          columns.XBound(c => c.Farbe).ClientTemplate("<input id='Farbe_<#= data.FIN #>' type='text' class='inputwidth colorautocomplete etikettcol' data-fieldname='Farbe' value='<#= data.Farbe #>' />");

                      })
                      .XPageSize(10)
                      .XAutoColumnConfiguration()
                      .ClientEvents(events => events.OnDataBound("OnDataBound_" + gridName).OnRowDataBound("OnRowDataBound_" + gridName))
                      .XSort(sortOrder => sortOrder.Add(c => c.FIN).Ascending())
                      .XToolBar(gridName)
                          )
        }
    }
    
</div>
