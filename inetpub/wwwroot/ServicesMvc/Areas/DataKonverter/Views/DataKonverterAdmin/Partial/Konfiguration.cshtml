@model CkgDomainLogic.DataKonverter.ViewModels.KroschkeDataKonverterViewModel

<h4>Konfiguration</h4>

<div class="w" style="visibility: hidden; height: 0px; padding: 0px; margin: 0px;">DUMMY</div>

<button class="btn white" style="width: 250px;">
    Datenquelle wählen
    <i class="icon-download"></i>
</button>

<button class="btn white margin-left-10" onclick="ClearAll();">
    Bereinigen
    <i class="icon-remove"></i>
</button>

<button class="btn white" onclick="NewProcessor();">
    Prozessor hinzufügen
    <i class="icon"></i>
</button>

<button class="btn white margin-left-10" onclick="Save();">
    Save
</button>

<button class="btn white" onclick="Load();">
    Load
</button>

<div id="DataKonverterContainer" style="position: relative; width: 100%; height: 470px;">

    <div id="processorTemplate" class="processor hidden">
        <div class="title">
            <span id="name">Prozessor</span>
            <button class="processorclose" style="float: right; margin-right: -10px; margin-top: 0px; border: 0px; padding: 0px;">x</button>
            <button style="float: right; margin-right: 3px; margin-top: 0px; border: 0px; padding: 0px;" onclick="SwitchProcessor();">_</button>
        </div>
        <div class="content">
            <select class="type">
                <option value="add">Zusammenfassen</option>
                <option value="replace">Austauschen</option>
                <option value="if">Wenn, dann</option>
                <option value="formula">Formel</option>
            </select>
            <span class="datain float-left">in</span>
            <span class="dataout float-right">out</span>
        </div>
        <div id="tmpprozin" class="prozin" action="in"></div>
        <div id="tmpprozout" class="prozout" action="out"></div>
    </div>

    <div id="source" style="padding: 0px;">
        <div class="w" id="Source1">
            <div class="field">Name1</div>
            <span class="data">Reinhold</span>
            <div class="sp"></div>
        </div>
        <div class="w" id="Source2">
            <div class="field">Name2</div>
            <span class="data">Messner</span>
            <div class="sp"></div>
        </div>
        <div class="w" id="Source3">
            <div class="field">GebDat</div>
            <span class="data">05.02.1977</span>
            <div class="sp"></div>
        </div>
        <div class="w" id="Source4">
            <div class="field">Strasse</div>
            <span class="data">Bergweg 7</span>
            <div class="sp"></div>
        </div>
        <div class="w" id="Source5">
            <div class="field">Plz</div>
            <span class="data">52227</span>
            <div class="sp"></div>
        </div>
        <div class="w" id="Source6">
            <div class="field">Ortsname</div>
            <span class="data">Bogenwall</span>
            <div class="sp"></div>
        </div>
        <div class="w" id="Source7">
            <div class="field">Kunde seit</div>
            <span class="data">15.04.2010</span>
            <div class="sp"></div>
        </div>
        <div class="w" id="Source8">
            <div class="field">Kundenart</div>
            <span class="data">5</span>
            <div class="sp"></div>
        </div>
        <div class="w" id="Source9">
            StrNr
            <div class="sp"></div>
        </div>
        <div class="w" id="Source10">
            PLZ
            <div class="sp"></div>
        </div>
        <div class="w" id="Source11">
            Ort
            <div class="sp"></div>
        </div>
        <div class="w" id="Source12">
            Str
            <div class="sp"></div>
        </div>
        <div class="w" id="Source13">
            StrNr
            <div class="sp"></div>
        </div>
        <div class="w" id="Source14">
            PLZ
            <div class="sp"></div>
        </div>
        <div class="w" id="Source15">
            Ort
            <div class="sp"></div>
        </div>
        <div class="w" id="Source16">
            Str
            <div class="sp"></div>
        </div>
        <div class="w" id="Source17">
            StrNr
            <div class="sp"></div>
        </div>
        <div class="w" id="Source18">
            PLZ
            <div class="sp"></div>
        </div>
        <div class="w" id="Source19">
            Ort
            <div class="sp"></div>
        </div>
        <div class="w" id="Source20">
            Str
            <div class="sp"></div>
        </div>
    </div>

    <div id="destination">
        <div class="w ept" id="Dest1">
            <div class="ep"></div>
            <div class="field">Vorname</div>
            <span class="data"></span>
        </div>
        <div class="w ept" id="Dest2">
            <div class="ep"></div>
            <div class="field">Nachname</div>
            <span class="data"></span>
        </div>
        <div class="w ept" id="Dest3">
            <div class="ep"></div>
            <div class="field">Straße</div>
            <span class="data"></span>
        </div>
        <div class="w ept" id="Dest4">
            <div class="ep"></div>
            <div class="field">HausNr</div>
            <span class="data"></span>
        </div>
        <div class="w ept" id="Dest5">
            <div class="ep"></div>
            <div class="field">XYZ</div>
            <span class="data"></span>
        </div>

    </div>

</div>

<script>

    var jsonProcessors = [{ "ProcessorId": "Processor-1", Title: "Title 1", "Top": "100", "Left": "100", "Type": "Formel"}];
    var jsonConnections = [{ "ConnectionId": "Connection-1", SourceId: "Source2", DestId: "Dest1"}];

    var startpointOptions = {
        isSource: true,
        isTarget: false,
        anchor: "Right",
        allowLoopback: false
    };
    var endpointOptions = {
        isSource: false,
        isTarget: true,
        maxConnections: 1,
        anchor: "Left",
        ConnectionsDetachable: true,
        ReattachConnections: true
    };

    jsPlumb.ready(function () {

        jsPlumb.importDefaults({
            Connector: ["Straight"], //  ["Bezier", { curviness: 1 }],
            Endpoint: ["Dot", { radius: 1}],
            HoverPaintStyle: { strokeStyle: "#1e8151", lineWidth: 5 },
            Anchors: ["Right", "Left"],
            ConnectionOverlays: [
                [
                    "Arrow", {
                        location: 1,
                        id: "arrow",
                        length: 11,
                        foldback: 0.8
                    }
                ],
            //["Label", { label: "Verbindung", id: "label", cssClass: "aLabel" }]
            ],
            Container: "forJsPlumb"
        });

        jsPlumb.makeSource($(".w"), startpointOptions);
        jsPlumb.makeTarget($(".ept"), endpointOptions);

        // Prozessor-Template
        jsPlumb.draggable("processorTemplate", {
            clone: true
        });
        jsPlumb.makeSource($(".prozout"), startpointOptions);
        jsPlumb.makeTarget($(".prozin"), endpointOptions);

        // Events
        window.addEventListener("resize", refreshPlumb);

        $('#source').on("scroll", function () {
            refreshPlumb();
        });
        $('#destination').on("scroll", function () {
            refreshPlumb();
        });

        jsPlumb.bind("dblclick", function (c) {
            jsPlumb.detach(c);
        });

        jsPlumb.bind("connection", function (info) {
            var sourceId = info.sourceId;
            var sourceDiv = $('#' + sourceId);
            var sourceField = sourceDiv.find(".field").html();
            var sourceData = "";

            var destId = info.targetId;
            var destDiv = $('#' + destId);

            var connections = [];
            $.each(jsPlumb.getConnections(), function (idx, connection) {
                connections.push({
                    connectionId: connection.id,
                    pageSourceId: connection.sourceId,
                    pageTargetId: connection.targetId
                });
            });

            var source = info.source;

            // Connection von ProzessorOut
            if (sourceId.substr(0, 7) === "prozout") {
                // Connection wurde vom ProzessorOut zum Zielfeld gezogen, also Ergebniswert 1:1 weiterleiten...
                sourceData = sourceDiv.parent().find(".dataout").html();

                // Connection from processor -> DestField
                if (destId.substr(0, 4) === "Dest") {
                    $('#' + destId).find(".data").html(sourceData);
                }
                // Connection from processor -> ProzessorIn
                if (destId.substr(0, 6) === "prozin") {
                    $('#' + destId).parent().find(".datain").html(sourceData);

                    // Init transformation...
                    // $('#' + destId).parent().find(".dataout").html("");
                    LiveTransform(sourceData, "testfunction", destId);
                }

            }
            else // Connection von SourceField
            {
                sourceData = sourceDiv.find(".data").html();
                // $('#' + destId).find(".data").html(sourceData);
                if (destId.substr(0, 4) === "Dest") {
                    $('#' + destId).find(".data").html(sourceData);
                } else {
                    LiveTransform(sourceData, "testfunction", destId);
                }
            }

        });

    });

    function refreshPlumb() {
        jsPlumb.repaintEverything();
    }

    function NewProcessor(processorId, title, posTop, posLeft, type) {
        var numItems = $('.processor').length;
        var div = document.getElementById('processorTemplate'), clone = div.cloneNode(true);

        if (processorId == undefined)
            processorId = "processor-" + numItems;

        if (title == undefined)
            title = "Prozessor " + numItems;

        clone.id = processorId;
        document.body.appendChild(clone);

        var newProcessor = $("#" + processorId);
        newProcessor.addClass("processoractive");
        newProcessor.removeClass("hidden");

        var top = newProcessor.position().top;
        var left = newProcessor.position().left;
        top = top + Math.floor((Math.random() * 30) + 1) + 300;
        left = left + Math.floor((Math.random() * 30) + 1);

        if (posTop != undefined)
            top = posTop;

        if (posLeft != undefined)
            left = posLeft;

        newProcessor.offset({ top: top, left: left });

        $(newProcessor).find("#name").html(title);
        var prozin = $(newProcessor).find("#tmpprozin");
        var prozout = $(newProcessor).find("#tmpprozout");

        prozin.attr("id", "prozin-" + numItems);
        prozout.attr("id", "prozout-" + numItems);

        jsPlumb.makeTarget($("#prozin-" + numItems), startpointOptions);
        jsPlumb.makeSource($("#prozout-" + numItems), endpointOptions);

        jsPlumb.draggable(clone);

        $(newProcessor).find(".processorclose").click(function () {
            jsPlumb.remove($(this).closest(".processor"));              // Alle Verbindungen incl. Prozessorobjekt entfernen
        });
    }

    function NewConnection(connectionId, source, dest) {
        jsPlumb.connect({
            source: source,
            target: dest
            //anchors: ["Right", "Left"],
            //paintStyle: { lineWidth: 5, strokeStyle: 'rgba(0,255,0,0.5)' },
            //endpointStyle: { radius: 5 },
            //endpoint: "Rectangle",
            //connector: "Straight"           
        });
        jsPlumb.repaint(connectionId);
    }

    function Save() {
        jsonProcessors = [];
        jsonConnections = [];

        // processors...
        $(".processoractive").each(function () {
            var obj = $(this);
            var processorId = $(obj).attr("id");
            var title = $(obj).find("#name").html();
            var posTop = $(obj).position().top;
            var posLeft = $(obj).position().left;
            var type = $(obj).find(".type").val();
            jsonProcessors.push({ "ProcessorId": processorId, "Title": title, "Top": posTop, "Left": posLeft, "Type": type });
        });

        // connections...
        var connectionList = jsPlumb.getConnections();
        connectionList.forEach(function (item) {
            var id = item.id;
            var source = item.sourceId;
            var dest = item.targetId;
            jsonConnections.push({ "ConnectionId": id, SourceId: source, DestId: dest });
        });

        console.log(jsonConnections);
    }

    function Load() {
        ClearAll();

        jsonProcessors.forEach(function (item) {
            if (item.ProcessorId !== "processorTemplate")
                NewProcessor(item.ProcessorId, item.Title, item.Top, item.Left, item.Type);
        });

        jsonConnections.forEach(function (item) {
            console.log(item.ConnectionId + " -> " + item.SourceId + " -> " + item.DestId);
            NewConnection(item.ConnectionId, item.SourceId, item.DestId);
            jsPlumb.repaint(item.ConnectionId);
        });

        jsPlumb.repaintEverything();
    }

    function ClearAll() {
        jsPlumb.detachEveryConnection();

        $(".processoractive").each(function (index) {
            jsPlumb.remove($(this).attr("id"));
        });

        $("#destination").each(function (index) {
            $(this).find(".data").html("");
        });
    }

    function LiveTransform(input, func, outputDivId) {
        $.ajax({
            type: "POST",
            url: "DataKonverterAdmin/LiveTransform",
            data: { input: input, func: func },
            loadingShow: true,
            success: function (result) {

                // Direkt an Zielfeld
                if (outputDivId.substr(0, 4) === "Dest") {
                    $('#' + outputDivId).find(".data").html(result.Output);
                }

                // An Prozessor
                if (outputDivId.substr(0, 6) === "prozin") {
                    $('#' + outputDivId).parent().find(".datain").html(input);
                    $('#' + outputDivId).parent().find(".dataout").html(result.Output);
                }
                
            }
        });
    }

</script>