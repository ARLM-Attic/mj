@using System.Xml
@using Newtonsoft.Json
@model CkgDomainLogic.DataKonverter.ViewModels.KroschkeDataKonverterViewModel

<h4>Konfiguration</h4>

<div class="w" style="visibility: hidden; height: 0px; padding: 0px; margin: 0px;">DUMMY</div>

<button class="btn white" style="width: 250px;">
    Datenquelle wählen
    <i class="icon-download"></i>
</button>

<button class="btn white margin-left-10" onclick="ClearAll();">
    Bereinigen
    <i class="icon-remove"></i>
</button>

<button class="btn white" onclick="NewProcessor();">
    Prozessor hinzufügen
    <i class="halflings-icon  plus"></i>
</button>

<button class="btn white margin-left-10" onclick="Save();">
    Save
</button>
<button class="btn white" onclick="Load();">
    Load
</button>

<button class="btn white margin-left-10" onclick="ShowProcessors(false);">
    Hide
</button>
<button class="btn white" onclick="ShowProcessors(true);">
    Show
</button>

<button class="btn white margin-left-10" onclick="SetToPosition('source', 'Source7', 2);">
    Move
</button>

<div id="processorTemplate" class="processor hidden">
    <div class="title">
        <div id="name" class="float-left" style="margin-top: -5px;margin-left:15px;">Prozessor</div>
        <button class="processorclose" style="float: right; margin-right: 18px; margin-top: -3px; border: 0px; padding: 0px;"><i class="icon-remove"></i></button>
    </div>
    <div class="content" style="">
        <select class="type" style="width: 151px; margin-top: 5px; margin-bottom: 1px;">
            <option value="add">Splitten</option>
            <option value="replace">Zusammenfassen</option>
        </select>
        <input type="text" name="Para1" value="Separator" style="width: 60px; float: left; margin-bottom: 2px;"/>
        <input type="text" name="Para2" value="Nummer" style="width: 60px; float: left; margin-left: 2px; margin-bottom: 2px;"/>

        <span class="data datain float-left">in</span>
        <span class="data dataout float-right">out</span>
    </div>
    <div id="tmpprozin" class="prozin"></div>
    <div id="tmpprozout" class="prozout"></div>
</div>

<div id="DataKonverterContainer2" style="width: 1500px; height: 500px; position: relative;">
    <div id="source" style="padding: 0px;">
        @foreach (var item in Model.SourceFile.Columns)
        {
         <div class="w" id="@item.Guid">
            <div class="field">@item.Caption</div>
            <span class="data">@item.Content[0]</span>
            <div class="sp"></div>
        </div>
        }
    </div>

    <div id="destination">
        @{
            foreach (XmlElement parent in Model.DestinationFile.XmlDocument.DocumentElement)
            {
                <div style="font-size: 12px; margin-top: 2px;margin-bottom: -3px;">@parent.Name</div>
                foreach (XmlElement child in parent)
                {
                    <div class="w ept" id="Dest-@parent.Name-@child.Name">
                        <div class="ep"></div>
                        <div class="field">@child.Name</div>
                        <span class="data"></span>
                    </div>
                }
            }
        }
    </div>
</div>

<script>

    var jsonProcessors = [{ "ProcessorId": "Processor-1", Title: "Title 1", "Top": "100", "Left": "100", "Type": "Formel"}];
    var jsonConnections = [{ "ConnectionId": "Connection-1", SourceId: "Source2", DestId: "Dest1"}];

    var startpointOptions = {
        isSource: true,
        isTarget: false,
        anchor: "Right",
        allowLoopback: false
    };
    var endpointOptions = {
        isSource: false,
        isTarget: true,
        maxConnections: 1,
        anchor: "Left",
        ConnectionsDetachable: true,
        ReattachConnections: true,
        allowLoopback: false
    };

    var endpointOptionsProzessor = {
        isSource: false,
        isTarget: true,
        anchor: "Left",
        ConnectionsDetachable: true,
        ReattachConnections: true,
        allowLoopback: false
    };

    jsPlumb.ready(function () {

        jsPlumb.importDefaults({
            Connector: ["Straight"], 
            Endpoint: ["Dot", { radius: 1}],
            HoverPaintStyle: { strokeStyle: "#1e8151", lineWidth: 5 },
            Anchors: ["Right", "Left"],
            ConnectionOverlays: [
                [
                    "Arrow", {
                        location: 1,
                        id: "arrow",
                        length: 11,
                        foldback: 0.8
                    }
                ]
            ],
                    Container: $('#DataKonverterContainer2')
        });

                jsPlumb.Defaults.Container = $('#DataKonverterContainer2');

        jsPlumb.makeSource($(".w"), startpointOptions);
        jsPlumb.makeTarget($(".ept"), endpointOptions);
        
        // Prozessor-Template
        jsPlumb.draggable("processorTemplate", {
            clone: true
        });


        // Events
        window.addEventListener("resize", refreshPlumb);

        $('#source').on("scroll", function () {
            refreshPlumb();
        });
        $('#destination').on("scroll", function () {
            refreshPlumb();
        });

        jsPlumb.bind("dblclick", function (c) {
            jsPlumb.detach(c);
        });

        jsPlumb.bind("connection", function (info) {
            var sourceId = info.sourceId;
            var sourceDiv = $('#' + sourceId);
            var sourceField = sourceDiv.find(".field").html();
            var sourceData = "";

            var destId = info.targetId;
            var destDiv = $('#' + destId);

            var connections = [];
            $.each(jsPlumb.getConnections(), function (idx, connection) {
                connections.push({
                    connectionId: connection.id,
                    pageSourceId: connection.sourceId,
                    pageTargetId: connection.targetId
                });
            });

            var source = info.source;
            
            // Connection von ProzessorOut
            if (sourceId.substr(0, 7) === "prozout") {
                // Connection wurde vom ProzessorOut zum Zielfeld gezogen, also Ergebniswert 1:1 weiterleiten...
                sourceData = sourceDiv.parent().find(".dataout").html();

                // Connection from processor -> DestField
                if (destId.substr(0, 4) === "Dest") {
                    $('#' + destId).find(".data").html(sourceData);
                }
                // Connection from processor -> ProzessorIn
                if (destId.substr(0, 6) === "prozin") {
                    $('#' + destId).parent().find(".datain").html(sourceData);

                    // Init transformation...
                    // $('#' + destId).parent().find(".dataout").html("");
                    LiveTransform(sourceData, "testfunction", destId);
                }

            }
            else // Connection von SourceField
            {
                sourceData = sourceDiv.find(".data").html();
                // $('#' + destId).find(".data").html(sourceData);
                if (destId.substr(0, 4) === "Dest") {
                    $('#' + destId).find(".data").html(sourceData);
                } else {
                    LiveTransform(sourceData, "testfunction", destId);
                }
            }

        });

    });

    function refreshPlumb() {
        jsPlumb.repaintEverything();
    }

    function NewProcessor(processorId, title, posTop, posLeft, type) {
        var numItems = $('.processor').length;
        var div = document.getElementById('processorTemplate'), clone = div.cloneNode(true);

        if (processorId == undefined)
            processorId = "processor-" + numItems;

        if (title == undefined)
            title = "Prozessor " + numItems;

        clone.id = processorId;
        document.body.appendChild(clone);

        var newProcessor = $("#" + processorId);
        newProcessor.addClass("processorobj");
        newProcessor.removeClass("hidden");

        var top = newProcessor.position().top;
        var left = newProcessor.position().left;
        top = top + Math.floor((Math.random() * 30) + 1) + 300;
        left = left + Math.floor((Math.random() * 30) + 1);

        if (posTop != undefined)
            top = posTop;

        if (posLeft != undefined)
            left = posLeft;

        newProcessor.offset({ top: top, left: left });

        $(newProcessor).find("#name").html(title);
        var prozin = $(newProcessor).find("#tmpprozin");
        var prozout = $(newProcessor).find("#tmpprozout");

        prozin.attr("id", "prozin-" + numItems);
        prozout.attr("id", "prozout-" + numItems);

        jsPlumb.makeTarget($("#prozin-" + numItems), endpointOptionsProzessor);
        jsPlumb.makeSource($("#prozout-" + numItems), startpointOptions);

        jsPlumb.draggable(clone);

        $(newProcessor).find(".processorclose").click(function () {
            jsPlumb.remove($(this).closest(".processor"));              // Alle Verbindungen incl. Prozessorobjekt entfernen
        });
    }

    function NewConnection(connectionId, source, dest) {
        jsPlumb.connect({
            source: source,
            target: dest
        });
        jsPlumb.repaint(connectionId);
    }

    function Save() {
        jsonProcessors = [];
        jsonConnections = [];

        // processors...
        $(".processorobj").each(function () {
            var obj = $(this);
            var processorId = $(obj).attr("id");
            var title = $(obj).find("#name").html();
            var posTop = $(obj).position().top;
            var posLeft = $(obj).position().left;
            var type = $(obj).find(".type").val();
            jsonProcessors.push({ "ProcessorId": processorId, "Title": title, "Top": posTop, "Left": posLeft, "Type": type });
        });

        // connections...
        var connectionList = jsPlumb.getConnections();
        connectionList.forEach(function (item) {
            var id = item.id;
            var source = item.sourceId;
            var dest = item.targetId;
            jsonConnections.push({ "ConnectionId": id, SourceId: source, DestId: dest });
        });

        console.log(jsonConnections);
    }

    function Load() {
        ClearAll();

        jsonProcessors.forEach(function (item) {
            if (item.ProcessorId !== "processorTemplate")
                NewProcessor(item.ProcessorId, item.Title, item.Top, item.Left, item.Type);
        });

        jsonConnections.forEach(function (item) {
            console.log(item.ConnectionId + " -> " + item.SourceId + " -> " + item.DestId);
            NewConnection(item.ConnectionId, item.SourceId, item.DestId);
            jsPlumb.repaint(item.ConnectionId);
        });

        jsPlumb.repaintEverything();
    }

    function ClearAll() {
        jsPlumb.detachEveryConnection();

        $(".processorobj").each(function (index) {
            jsPlumb.remove($(this).attr("id"));
        });

        $("#destination").each(function (index) {
            $(this).find(".data").html("");
        });
    }

    function LiveTransform(input, func, outputDivId) {
        $.ajax({
            type: "POST",
            url: "Admin/LiveTransform",
            data: { input: input, func: func },
            loadingShow: true,
            success: function (result) {
                
                // Direkt an Zielfeld
                if (outputDivId.substr(0, 4) === "Dest") {
                    $('#' + outputDivId).find(".data").html(result.Output);
                }

                // An Prozessor
                if (outputDivId.substr(0, 6) === "prozin") {
                    $('#' + outputDivId).parent().find(".datain").html(input);
                    $('#' + outputDivId).parent().find(".dataout").html(result.Output);
                }
                
            }
        });
    }
    
    function ShowProcessors(value) {
        $(".processorobj").each(function (index) {
            $(this).find(".content").toggle(value);
            if (value) {
                $(this).css("height", "85px");
            } else {
                $(this).css("height", "14px");
            }
        });
    }

    function SetToPosition(rootDivId, divIdToMove, position) {        
        $("#" + rootDivId + " .w").each(function (index) {
            if (index + 1 === position && $(this).attr("id") !== divIdToMove) {  // Move, but not if sourceId has already target position
                $('#' + divIdToMove).detach().insertBefore($(this));

                $('#' + divIdToMove).animate({ backgroundColor: "blue" }, 200, function () {
                    $('#' + divIdToMove).animate({ backgroundColor: "white" }, 200);
                });
            }
        });
    }

</script>