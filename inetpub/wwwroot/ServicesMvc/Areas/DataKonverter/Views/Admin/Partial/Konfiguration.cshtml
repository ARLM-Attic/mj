@using System.Xml
@using Newtonsoft.Json
@model CkgDomainLogic.DataKonverter.ViewModels.KroschkeDataKonverterViewModel

<style>
    .nodetitle {
        font-size: 12px;margin-top: 2px;margin-bottom: -3px;background-color: #add8e6;padding-left: 4px;font-weight: bold;border: 1px solid gray;
    }
</style>

<div id="DivKonfiguration" class="margin-top-20" style="height: 550px;">
    <h4>Konfiguration</h4>

    <div class="w" style="visibility: hidden; height: 0px; padding: 0px; margin: 0px;">DUMMY</div>

    @*<select id="GlobalDtFormat" name="GlobalDtFormat" size="5" style="width: 120px !important;">
        <option value="1">5. Januar 2015 -> 05.01.2015</option>
        <option value="2">Abmeldung</option>
    </select>*@

    <button class="btn white" onclick="GotoFirst();">
        <<
    </button>
    <button class="btn white" onclick="Goto(-1);">
        <
    </button>

    <button class="btn white" onclick="Goto(1);">
        >
    </button>
    <button class="btn white" onclick="GotoLast();">
        >>
    </button>

    <span id="RecordPosition" class="margin-left-15 badge margin-right-30">
        @Model.DataMapper.RecordInfoText
    </span>
    
    <button class="btn white" onclick="NewProcessor();">
        Neuer Prozessor
        <i class="halflings-icon  plus"></i>
    </button>

    <button class="btn white" onclick="ClearAll();">
        Leeren
        <i class="icon-remove"></i>
    </button>

    @*<button class="btn white margin-left-10" onclick="Save();">
        Save
    </button>
    <button class="btn white" onclick="Load();">
        Load
    </button>*@

    <button class="btn white margin-left-10" onclick="ShowProcessors(false);">
        Hide
    </button>
    <button class="btn white" onclick="ShowProcessors(true);">
        Show
    </button>

    <div id="processorTemplate" class="processor hidden">
        <div class="title">
            <div id="name" class="float-left" style="margin-top: -5px; margin-left: 15px;">Prozessor</div>
            <button class="processorclose" style="float: right; margin-right: 18px; margin-top: -3px; border: 0px; padding: 0px;"><i class="icon-remove"></i></button>
        </div>
        <div class="content" style="">
            <select class="type" style="width: 151px; margin-top: 5px; margin-bottom: 1px;">
                <option value="add">Splitten</option>
                <option value="replace">Zusammenfassen</option>
            </select>
            <input type="text" name="Para1" value="*#*" style="width: 60px; float: left; margin-bottom: 2px;"/>
            <input type="text" name="Para2" value="1" style="width: 60px; float: left; margin-left: 2px; margin-bottom: 2px;"/>
            <br style="clear: both;"/> 
            <div class="data datain">in</div><br style="clear: both;"/> 
            <div class="data dataout" >out</div>
        </div>
        <div id="tmpprozin" class="prozin"></div>
        <div id="tmpprozout" class="prozout"></div>
    </div>

    @*<div id="DivKonfiguration" class="margin-top-20">
    @using (Ajax.BeginForm("Konfiguration", "Admin", null,
        new MvcAjaxOptions { UpdateTargetId = "DivKonfiguration", OnComplete = "AjaxFormKonfigurationComplete();" },
        htmlAttributes: new {@class = "form-horizontal", id = "AjaxFormKonfiguration"}))
    {
        @Html.FormValidationSummary()
    }
</div>*@

    <div id="DataKonverterContainer2x" style="width: 650px;">
        <div id="source" style="padding: 0px;">
            @foreach (var item in Model.DataMapper.SourceFile.Fields)
            {
                <div class="w" id="@item.Guid">
                    <div class="field">@item.Caption</div>
                    <div class="data">@item.Records[0]</div>
                    <div class="sp"></div>
                </div>
            }
        </div>

        <div id="destination">
            @{
                var node = "";
                foreach (XmlElement parent in Model.DataMapper.DestinationFile.XmlDocument.DocumentElement)
                {
                    <div class="nodetitle">@parent.Name</div>
                    
                    foreach (XmlElement child in parent)
                            {
                                if (!child.HasChildNodes)
                                {
                           <div class="w ept" id="Dest-@parent.Name-@child.Name">
                            <div class="ep">
                            </div>
                            <div class="field">@child.Name</div>
                            <span class="data"></span>
                        </div> 
                                }

                                if (child.HasChildNodes)
                                {
                            <div class="nodetitle">@parent.Name > @child.Name</div>
                                    foreach (XmlElement childchild in child)
                                    {
                                <div class="w ept" id="Dest-@parent.Name-@childchild.Name">
                                    <div class="ep">
                                    </div>
                                    <div class="field">@childchild.Name</div>
                                    <span class="data"></span>
                                </div>
                                    }
                                }
                            }
                        }
                }
        </div>
    </div>

</div>

<script>

    var jsonProcessors = [{ "ProcessorId": "Processor-1", Title: "Title 1", "Top": "100", "Left": "100", "Type": "Formel"}];
    var jsonConnections = [{ "ConnectionId": "Connection-1", SourceId: "Source2", DestId: "Dest1"}];

    var startpointOptions = {
        isSource: true,
        isTarget: false,
        anchor: "Right",
        allowLoopback: false
    };
    var endpointOptions = {
        isSource: false,
        isTarget: true,
        maxConnections: 1,
        anchor: "Left",
        ConnectionsDetachable: true,
        ReattachConnections: true,
        allowLoopback: false
    };

    var endpointOptionsProzessor = {
        isSource: false,
        isTarget: true,
        anchor: "Left",
        ConnectionsDetachable: true,
        ReattachConnections: true,
        allowLoopback: false
    };

    $(function () {
        $('.processorobj').show();
        $('#GlobalDtFormat').chosen();
    });

    jsPlumb.ready(function () {
        jsPlumb.importDefaults({
            Connector: ["Straight"], 
            Endpoint: ["Dot", { radius: 1}],
            HoverPaintStyle: { strokeStyle: "#1e8151", lineWidth: 5 },
            Anchors: ["Right", "Left"],
            ConnectionOverlays: [
                [
                    "Arrow", {
                        location: 1,
                        id: "arrow",
                        length: 11,
                        foldback: 0.8
                    }
                ]
            ],
            Container: $('#DataKonverterContainer2x')
        });

        jsPlumb.Defaults.Container = $('#DataKonverterContainer2x');

        jsPlumb.makeSource($(".w"), startpointOptions);
        jsPlumb.makeTarget($(".ept"), endpointOptions);
        
        // Prozessor-Template
        jsPlumb.draggable("processorTemplate", {
            clone: true
        });


        // Events
        window.addEventListener("resize", refreshPlumb);

        $('#source').on("scroll", function () {
            refreshPlumb();
        });
        $('#destination').on("scroll", function () {
            refreshPlumb();
        });

        jsPlumb.bind("dblclick", function (c) {
            jsPlumb.detach(c);
        });

        jsPlumb.unbind("connection").bind("connection", function (info) {

            var idSource = info.sourceId;
            var sourceDiv = $('#' + idSource);
            var sourceField = sourceDiv.find(".field").html();
            var sourceData = "";

            var idDest = info.targetId;
            var destDiv = $('#' + idDest);

            var connections = [];
            $.each(jsPlumb.getConnections(), function (idx, connection) {
                connections.push({
                    connectionId: connection.id,
                    pageSourceId: connection.sourceId,
                    pageTargetId: connection.targetId
                });
            });

            var source = info.source;

            var sourceIsProcessor = false;
            var destIsProcessor = false;

            if (idSource.substr(0, 7) == "prozout")
                sourceIsProcessor = true;

            if (idDest.substr(0, 4) != "Dest")
                destIsProcessor = true;

            idDest = idDest.replace("prozin-", "");
            $.ajax({
                type: "POST",
                url: "Admin/NewConnection",
                // data: newConnection,
                data: { IdSource: idSource, IdDest: idDest, SourceIsProcessor: sourceIsProcessor, DestIsProcessor: destIsProcessor },
                loadingShow: false,
                success: function (processors) {
                    // alert("result: " + result.SourceIsProcessor);
                    for (var i = 0; i < processors.length; i++) {
                        // console.log(x[i].id);
                        // alert(processorList[i].Input + " -> " + processorList[i].Output);
                        var processorId = processors[i].Guid;
                        var valueIn = processors[i].Input;
                        var valueOut = processors[i].Output;
                        $('#' + processorId).find(".datain").html(valueIn);
                        $('#' + processorId).find(".dataout").html(valueOut);
                    }
                }
            });

        });

    });

    function refreshPlumb() {
        jsPlumb.repaintEverything();
    }

    function NewProcessor(processorId, title, posTop, posLeft, type) {
        $.ajax({
            type: "POST",
            url: "Admin/NewProcessor",
            // data: { Id: "Id", Name: "Name" },
            loadingShow: false,
            success: function (result) {
                var processorId = result.NewGuid;
                // alert("processorId: " + processorId);

                var numItems = $('.processor').length;
                var div = document.getElementById('processorTemplate'), clone = div.cloneNode(true);

                if (title == undefined)
                    title = "Prozessor " + numItems;

                clone.id = processorId;
                document.body.appendChild(clone);

                var newProcessor = $("#" + processorId);
                newProcessor.addClass("processorobj");
                newProcessor.removeClass("hidden");

                var top = newProcessor.position().top;
                var left = newProcessor.position().left;
                top = top + Math.floor((Math.random() * 30) + 1) + 300;
                left = left + Math.floor((Math.random() * 30) + 1);

                if (posTop != undefined)
                    top = posTop;

                if (posLeft != undefined)
                    left = posLeft;

                newProcessor.offset({ top: top, left: left });

                $(newProcessor).find("#name").html(title);
                var prozin = $(newProcessor).find("#tmpprozin");
                var prozout = $(newProcessor).find("#tmpprozout");

                prozin.attr("id", "prozin-" + processorId);
                prozout.attr("id", "prozout-" + processorId);

                jsPlumb.makeTarget($("#prozin-" + processorId), endpointOptionsProzessor);
                jsPlumb.makeSource($("#prozout-" + processorId), startpointOptions);

                jsPlumb.draggable(clone);

                $(newProcessor).find(".processorclose").click(function () {
                    jsPlumb.remove($(this).closest(".processor"));              // Alle Verbindungen incl. Prozessorobjekt entfernen
                });
            }
        });
    }

    function NewConnection(connectionId, source, dest) {
        jsPlumb.makeSource($(".w"), startpointOptions);
        jsPlumb.makeTarget($(".ept"), endpointOptions);

        jsPlumb.connect({
            source: source,
            target: dest
        });
        jsPlumb.revalidate();
        jsPlumb.repaintEverything();
    }

    function Save() {
        jsonProcessors = [];
        jsonConnections = [];

        // processors...
        $(".processorobj").each(function () {
            var obj = $(this);
            var processorId = $(obj).attr("id");
            var title = $(obj).find("#name").html();
            var posTop = $(obj).position().top;
            var posLeft = $(obj).position().left;
            var type = $(obj).find(".type").val();
            jsonProcessors.push({ "ProcessorId": processorId, "Title": title, "Top": posTop, "Left": posLeft, "Type": type });
        });

        // connections...
        var connectionList = jsPlumb.getConnections();
        connectionList.forEach(function (item) {
            var id = item.id;
            var source = item.sourceId;
            var dest = item.targetId;
            jsonConnections.push({ "ConnectionId": id, SourceId: source, DestId: dest });
        });

        console.log(jsonConnections);
    }

    function Load() {
        ClearAll();

        jsonProcessors.forEach(function (item) {
            if (item.ProcessorId !== "processorTemplate")
                NewProcessor(item.ProcessorId, item.Title, item.Top, item.Left, item.Type);
        });
                
        jsonConnections.forEach(function (item) {
            console.log(item.ConnectionId + " -> " + item.SourceId + " -> " + item.DestId);
            NewConnection(item.ConnectionId, item.SourceId, item.DestId);
            jsPlumb.repaint(item.ConnectionId);
        });

        jsPlumb.repaintEverything();
    }

    function ClearAll() {
        jsPlumb.detachEveryConnection();

        $(".processorobj").each(function (index) {
            jsPlumb.remove($(this).attr("id"));
        });

        $("#destination").each(function (index) {
            $(this).find(".data").html("");
        });
    }

//    function LiveTransform(input, func, outputDivId) {
//        $.ajax({
//            type: "POST",
//            url: "Admin/LiveTransform",
//            data: { input: input, func: func },
//            loadingShow: false,
//            success: function (result) {
//                
//                // Direkt an Zielfeld
//                if (outputDivId.substr(0, 4) === "Dest") {
//                    $('#' + outputDivId).find(".data").html(result.Output);
//                }

//                // An Prozessor
//                if (outputDivId.substr(0, 6) === "prozin") {
//                    $('#' + outputDivId).parent().find(".datain").html(input);
//                    $('#' + outputDivId).parent().find(".dataout").html(result.Output);
//                }
//                
//            }
//        });
//    }
    
    function ShowProcessors(value) {
        $(".processorobj").each(function (index) {
            $(this).find(".content").toggle(value);
            if (value) {
                $(this).css("height", "85px");
            } else {
                $(this).css("height", "14px");
            }
        });
    }

    function Goto(value) {
        
    }

</script>