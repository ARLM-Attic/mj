@using CkgDomainLogic.Remarketing.Models
@model CkgDomainLogic.Remarketing.ViewModels.BelastungsanzeigenViewModel

@{ var gridName = "GridBelastungsanzeigen"; }

@Html.FormValidationSummary()

@(Html.Telerik()
    .Grid<Belastungsanzeige>()
    .Name(gridName)
    .XAjaxDataBinding("BelastungsanzeigenAjaxBinding", "Remarketing")
    .Columns(columns =>
    {
        columns.XBound(c => c.Auswahl).Filterable(false).Sortable(false).Groupable(false).Visible((Model.IsAv && Model.Selektor.Status == "0") || (!Model.IsAv && !string.IsNullOrEmpty(Model.Selektor.Status) && Model.Selektor.Status != "4"))
            .ClientTemplate(
                "<input type='checkbox' name='checkedRecords' <# if (data.Auswahl) { #> checked <# } #> value='<#= data.FahrgestellNr #>' onchange='OnSelectionChange_GridBelastungsanzeigen($(this))' />"
            )
            .HeaderTemplate(
                "<input type='checkbox' id='uncheckAllRecords' onchange='OnAllSelectionChange_GridBelastungsanzeigen($(this).is(\":checked\"))' />"
            );

        columns.XBound(c => c.Status).Filterable(false).Sortable(false).Groupable(false).Visible(Model.IsAv)
            .ClientTemplate(
                "<button onclick='SetReklamation(\"<#= data.FahrgestellNr #>\");' class='btn mini gray tooltips <# if (data.Status != \"0\" && data.Status != \"3\") { #>" + "hide" + "<# } #>' data-original-title='" + Localize.ClaimAsVerb + "' data-placement='right'><i class='halflings-icon remove white'></i></button>"
            );
        
        columns.XBound(c => c.AnzahlReparaturKalkulationen).Filterable(false).Sortable(false).Groupable(false)
            .ClientTemplate(
                "<button onclick='ShowReklamation(\"<#= data.FahrgestellNr #>\");' class='btn mini gray tooltips <# if (data.StatusText != \"Widersprochen\") { #>" + "hide" + "<# } #>' data-original-title='" + Localize.Objection + "' data-placement='right'><i class='halflings-icon comments white'></i></button>"
                + "&nbsp;"
                + "<button onclick='ShowBlockade(\"<#= data.FahrgestellNr #>\");' class='btn mini gray tooltips <# if (data.StatusText != \"Blockiert\") { #>" + "hide" + "<# } #>' data-original-title='" + Localize.CauseOfBlock + "' data-placement='right'><i class='halflings-icon comments white'></i></button>"
                + "&nbsp;"
                + "<button onclick='ShowGutachten(\"<#= data.FahrgestellNr #>\");' class='btn mini gray tooltips' data-original-title='" + Localize.ShowSurvey + "' data-placement='right'><i class='halflings-icon info-sign white'></i></button>"
                + "&nbsp;"
                + "<a class='btn mini gray pdf tooltips' data-original-title='" + Localize.DebitNote + "' data-placement='right' href='GetBelastungsanzeigePdf?fin=<#= data.FahrgestellNr #>' ></a>"
                + "&nbsp;"
                + "<a class='btn mini gray tuev tooltips <# if (data.Gutachter != \"TUEV\" || !data.FahrgestellNr) { #>" + "hide" + "<# } #>' data-original-title='" + Localize.TuevSurvey + "' data-placement='right' href='" + Model.TuevGutachtenBaseUrl + "<#= data.FahrgestellNr #>' ></a>"
                + "&nbsp;"
                + "<a class='btn mini gray pdf tooltips <# if (!data.AnzahlReparaturKalkulationen || AnzahlReparaturKalkulationen == 0) { #>" + "hide" + "<# } #>' data-original-title='" + Localize.RepairCalculation + "' data-placement='right' href='GetReparaturKalkulationPdf?fin=<#= data.FahrgestellNr #>' ></a>"
            );

        columns.XBound(c => c.FahrgestellNr)
            .ClientTemplate(
                "<a href='#' class='link tooltips' data-original-title='" + Localize.VehicleHistory + "' data-placement='right' onclick='ShowEquiHistorieAjax(\"<#= data.FahrgestellNr #>\");'><#= data.FahrgestellNr #></a>"
            );

        columns.XBound(c => c.Kennzeichen);
        columns.XBound(c => c.InventarNr);
        columns.XBound(c => c.AutoVermieter);
        columns.XBound(c => c.Hereinnahmecenter);
        columns.XBound(c => c.HcEingang).Format("{0:dd.MM.yyyy}");
        columns.XBound(c => c.Beauftragungsdatum).Format("{0:dd.MM.yyyy}");
        columns.XBound(c => c.Gutachtendatum).Format("{0:dd.MM.yyyy}");
        columns.XBound(c => c.Freigabedatum).Format("{0:dd.MM.yyyy}");
        columns.XBound(c => c.StatusText);
        columns.XBound(c => c.Summe).Format("{0:c}");
        columns.XBound(c => c.AnzahlGutachten);
        columns.XBound(c => c.RechnungsNr);
        columns.XBound(c => c.Mietfahrzeug);
    })
    .XAutoColumnConfiguration()
    .ClientEvents(events => events.XAutoClientEvents(gridName).OnLoad("OnLoad_GridBelastungsanzeigen"))
    .XPageSize(10)
    .XSort(sortOrder => sortOrder.Add(c => c.FahrgestellNr))
    .ToolBar(commands =>
    {
        commands.FilteredDataCommand("ExportBelastungsanzeigenFilteredExcel", "Remarketing");
        commands.FilteredDataCommand("ExportBelastungsanzeigenFilteredPDF", "Remarketing");
    })
)

<div class="form-horizontal">
    <div class="form-actions">
        <button type="button" class="btn green @(Model.IsAv || string.IsNullOrEmpty(Model.Selektor.Status) || Model.Selektor.Status.In("1,4,9") ? "hide" : "")" onclick="SetBlock();">@Localize.BlockAsVerb</button>
        <button type="button" class="btn green @(Model.IsAv || Model.Selektor.Status != "9" ? "hide" : "")" onclick="SetNoBlock();">@Localize.Reverse</button>
        <button type="button" class="btn green @(!Model.IsAv || Model.Selektor.Status != "0" ? "hide" : "")" onclick="SetInArbeit();">@Localize.WorkInProgress</button>
        <button type="button" class="btn green @(Model.IsAv || Model.Selektor.Status != "1" ? "hide" : "")" onclick="SetOpen();">@Localize.SetOpen</button>
    </div>
</div>
