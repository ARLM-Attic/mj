@model CkgDomainLogic.Fahrer.ViewModels.FahrerViewModel

@Html.Partial("Partial/Common")
@Html.Partial("Partial/Upload/UploadScripts")

<style type="text/css">
    .form-horizontal .control-label { width: 70px; float: left;padding-top: 5px; text-align: left; }
    .form-horizontal .controls { margin-left: 70px; }
    .delete-button { vertical-align: top; }
    .preview-image {float: left; margin-right: 15px;margin-bottom: 10px; }
    
    .btn-fixed-width { width: 150px!important; display: inline-block; }
    .btn { margin-bottom: 5px; }
</style>
<h3 class="page-title">Foto <small>Upload</small></h3>

@Html.IeWarning(8)

<form action="#" class="form-horizontal">
    @Html.FormDropDownListFor(m => m.SelectedFahrerAuftragsKey, Model.FahrerAuftragsFahrten.ToSelectList(), new { @class = "m-wrap xlarge" })
    
    @Html.SpanAlert("InfoMessage")
</form>

<div id="auftrags-fotos" class="hide">
    <h5><i class="icon-picture"></i> Fotos Ihres Auftrags <span id="SelectedAuftragsKey" class="bold">@Model.SelectedFahrerAuftragsKey</span></h5>
    <div class="tabbable tabbable-custom margin-top-15">
        <ul class="nav nav-tabs">
            <li class="active"><a href="#tab_1_1" data-toggle="tab">Hochladen</a></li>
            <li><a href="#tab_1_2" onclick="return OnTabUploadedImagesActivated()" data-toggle="tab">Bearbeiten</a></li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane active" id="tab_1_1">
                @Html.Partial("Partial/Upload/FotoUpload/UploadNew", Model)
            </div>               
            <div class="tab-pane" id="tab_1_2">
                @Html.Partial("Partial/Upload/FotoUpload/UploadEdit", Model)
            </div>               
        </div>
    </div>
</div>

<script type="text/javascript">

    function FormPreparePrivate() {
        InitUploadControl();
        InitDropDownList();
    }
    
    function ShowHideAuftragsFotoDiv(cb) {
        if (cb.val() == "-" || cb.val() == null) $("#auftrags-fotos").fadeOut(300); else $("#auftrags-fotos").fadeIn(300); 
    }

    function InitDropDownList() {

        ShowHideAuftragsFotoDiv($("#SelectedFahrerAuftragsKey"));
        
        $("#SelectedFahrerAuftragsKey").on("change", function () {
            var cb = $(this);

            ShowHideAuftragsFotoDiv(cb);

            if (cb.val() == null)
                return;

            ShowWaitHintUploadedTab();

            $.ajax({
                type: "POST",
                dataType: 'json',
                url: "SetSelectedFahrerAuftragsKey",
                data: { auftragsKey: cb.val() },
                loadingShow: false,
                success: function (result) {
                    $("#SelectedAuftragsKey").html(result.selectedAuftragsKey);
                    OnTabUploadedImagesActivated();
                },
                error: function (jqXhr) {
                    SpanAlertAjaxError("InfoMessage", jqXhr);
                }
            });

        });
        $("#SelectedFahrerAuftragsKey").trigger("change");
    }
    
    function ShowWaitHintUploadedTab() {
        $("#tab_1_2").html("<div class='margin-top-10 margin-bottom-10'><span class='alert'>Bitte einen Moment Geduld...</span></div>");
    }

    function OnTabUploadedImagesActivated() {

        ShowWaitHintUploadedTab();

        $.ajax({
            cache: false,
            type: "POST",
            url: "GetUploadedImageFilesPartial",
            data: {},
            loadingShow: false,
            success: function (result) {
                //alert(result);
                $("#tab_1_2").html(result);
            },
            error: function (jqXhr) {
                SpanAlertAjaxError("InfoMessage", jqXhr);
            }
        });

        return true;
    }
    
    function DeleteUploadedImage(deleteButton, imageFileName) {

//        if (!confirm("Foto wirklich löschen?"))
//            return;

        $.ajax({
            type: "POST",
            dataType: 'json',
            url: "DeleteUploadedImage",
            data: { imageFileName: imageFileName },
            loadingShow: false,
            success: function (result) {
                deleteButton.closest(".preview-image").remove();
            },
            error: function (jqXhr) {
                SpanAlertAjaxError("InfoMessage", jqXhr);
            }
        });
    }

    function InitUploadControl() {
        'use strict';
        // Change this to the location of your server-side upload handler:
        var url = 'UploadImage',

        uploadButton = $('<button/>')
            .addClass('btn btn-primary upload-button')
            .prop('disabled', true)
            .text('Processing...')
            .on('click', function () {
                var $this = $(this), data = $this.data();

                $this.parent().find(".delete-button").remove();

                $this
                    .off('click')
                    .text('Abort')
                    .on('click', function () {
                        $this.remove();
                        data.abort();
                    });
                data.submit().always(function () {
                    $this.remove();
                });
            }),

        deleteButton = $('<button/>')
            .addClass('btn red mini delete-button')
            //.text('Entfernen...')
            .html('<i class="icon-remove"></i>')
            .on('click', function () {
                var $this = $(this), data = $this.data();

                var nodeToRemove = $this.closest("div");
                nodeToRemove.remove();

                if ($(".upload-single").length == 0) {
                    $("#upload-all").fadeOut({ duration: 300 });
                    $('#progress').fadeOut({ duration: 300 });
                }
            });

        var uploadAllSingleButtons = null;
        var uploadAllSingleButtonIndex = 0;

        function uploadAllSingles() {
            if (uploadAllSingleButtons == null)
                return;

            if (uploadAllSingleButtonIndex >= uploadAllSingleButtons.length) {
                uploadAllSingleButtons = null;
                uploadAllSingleButtonIndex = 0;
                
                //
                // upload all finished!
                $('#progress').fadeOut({ duration: 300 });
                $("#upload-all").hide();
                $('#progress .bar').css('width', '0%');
                SpanAlertSuccess("InfoMessage", "Ihre Fotos wurden hochgeladen!<br />Sie können nun weitere Fotos hochladen oder die hochgeladenen Fotos bearbeiten.<br />Klicken Sie hierfür auf das Register 'Bearbeiten'", 8000);
                return;
            }

            $(uploadAllSingleButtons[uploadAllSingleButtonIndex]).trigger("click");
        }

        $("#upload-all").click(function () {
            uploadAllSingleButtons = $(".upload-single");
            uploadAllSingleButtonIndex = 0;
            uploadAllSingles();
        });

        $('#fileupload').fileupload({
            url: url,
            dataType: 'json',
            autoUpload: false,
            acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
            maxFileSize: 15000000, // 15 MB
            // MJE obsolete: 
            //   (disable image resizing for Android and Opera,
            //    which actually support image resizing, but fail to
            //    send Blob objects via XHR requests:)
            //            disableImageResize: /Android(?!.*Chrome)|Opera/
            //            .test(window.navigator.userAgent),
            disableImageResize: false,
            previewMaxWidth: 150,
            previewMaxHeight: 100,
            imageMaxWidth: 800,
            imageMaxHeight: 600,
            previewCrop: true
        }).on('fileuploadadd', function (e, data) {
            data.context = $('<div/>').appendTo('#files');
            $.each(data.files, function (index, file) {
                var node = $('<p/>').addClass("preview-image");
                if (!index) {
                    node
                        .append('<span>&nbsp;</span>')
                        .append(uploadButton.clone(true).data(data))
                        .append('<span>&nbsp;</span>')
                        .append(deleteButton.clone(true).data(data))
                        .append($('<div/>').text(file.name));
                }
                node.appendTo(data.context);
                $("#upload-all").fadeIn({ duration: 1000 });
                $('#progress').fadeIn({ duration: 1000 });
            });
        }).on('fileuploadprocessalways', function (e, data) {
            var index = data.index,
            file = data.files[index],
            node = $(data.context.children()[index]);
            if (file.preview) {
                node
                //.prepend('<br>')
                .prepend(file.preview);
            }
            if (file.error) {
                node
                .append('<br>')
                .append($('<span class="text-danger"/>').text(file.error));
            }
            if (index + 1 === data.files.length) {
                data.context.find('.upload-button')
                    .text('Upload')
                    .addClass('upload-single hide')
                    .prop('disabled', !!data.files.error);
            }
        }).on('fileuploadprogressall', function (e, data) {
            var fileCount = 1;
            var filePosition = 1;
            if (uploadAllSingleButtons != null) {
                filePosition = uploadAllSingleButtonIndex + 1;
                fileCount = uploadAllSingleButtons.length;
            }
            var progress = parseInt(data.loaded / data.total * 100 / (fileCount / filePosition), 10);
            //alert(progress);
            $('#progress .bar').css('width', progress + '%');
        }).on('fileuploaddone', function (e, data) {
            $.each(data.result.files, function (index, file) {
                if (file.url) {
                    //                    var link = $('<a>')
                    //                    .attr('target', '_blank')
                    //                    .prop('href', file.url);
                    //                    $(data.context.children()[index])
                    //                    .wrap(link);
                    setTimeout(function () {
                        $(data.context.children()[index]).fadeOut({ duration: 300 });
                    }, 300);

                    if (uploadAllSingleButtons != null) {
                        //alert('ok');
                        uploadAllSingleButtonIndex++;
                        setTimeout(uploadAllSingles, 500);
                    }
                }
                else if (file.error) {
                    var error = $('<span class="alert alert-warning"/>').text(file.error);
                    $(data.context.children()[index])
                    .append('<br>')
                    .append(error);
                }
            });
        }).on('fileuploadfail', function (e, data) {
            $.each(data.files, function (index, file) {
                var error = $('<span class="text-danger"/>').text('File upload failed.');
                $(data.context.children()[index])
                .append('<br>')
                .append(error);
            });
        }).prop('disabled', !$.support.fileInput)
        .parent().addClass($.support.fileInput ? undefined : 'disabled');
    }
    
</script>
