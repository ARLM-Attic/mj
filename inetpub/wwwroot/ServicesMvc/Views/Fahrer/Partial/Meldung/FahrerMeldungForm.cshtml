@using CkgDomainLogic.Fahrer.ViewModels
@model FahrerBelegungViewModel

<div id="divFahrerMeldungForm">
    @using (Ajax.BeginForm("FahrerMeldungFormSave", "Fahrer", null, new MvcAjaxOptions("divFahrerMeldungForm") { OnComplete = "FahrerMeldungFormComplete();" }, htmlAttributes: new { @class = "form-horizontal form-row-stripped", id = "ajaxForm" }))
    {
        @Html.FormValidationSummary()

        <button id="setDts" type="button" class="btn hide" onclick="TestSetselectedBelegungen();">Set Dates</button>
        <button id="calcDim" type="button" class="btn hide" onclick="TestCalcDimensions();"></button>

        <div class="controls-width-400">
            @Html.FormRadioButtonListFor(m => m.BelegungsTypAsInt, FahrerBelegungViewModel.BelegungsTypen)
        </div>

        @Html.FormTextBoxFor(m => m.FahrerAnzahl, new { @class = "m-wrap xsmall", data_min = "1", data_max = "9", @readonly = "readonly" },
                             postControlHtml: @<text>
                                                    <a class="btn btn-plus-minus margin-left-15" href="#" onclick="return incrementFahrer('Up');"><i class="icon-plus"></i></a> 
                                                    <a class="btn btn-plus-minus margin-left-15" href="#" onclick="return incrementFahrer('Down');"><i class="icon-minus"></i></a> 
                                                </text>)

        @Html.FormTextBoxFor(m => m.Kommentar, new { @class = "m-wrap large"},
                             postControlHtml: @<text>
                                                    <a class="btn btn-plus-minus margin-left-15 tooltips" data-original-title="Bemerkungsfeld leeren" data-placement="right" href="#" onclick="return clearComment();"><i class="icon-remove"></i></a> 
                                                </text>)
        
        <div class="row-fluid">
            <div class="span8">
                <div class="control-group">
                    <div class="controls">
                        <div id="ui_date_picker_inline" class="datepicker-inline"></div>
                        @Html.SpanAlert("DatePickerMessage")
                    </div>
                </div>
            </div>
            <div class="span4">
                <div class="control-group">
                    <div class="controls">
                        <div id="kommentar-grid"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-actions">
            <button type="button" class='btn blue' onclick="return SaveSelectedBelegungen()"><i class='icon-save'></i>&nbsp;Speichern</button>
            <button type="submit" class='btn grey margin-right-20'><i class='icon-remove'></i>&nbsp;Abbrechen</button>

            <a href="FahrerMeldungenDownloadExcel" class='btn green'><i class='icon-download'></i>&nbsp;Excel Download</a>
        </div>
   
        <script type="text/javascript">

            var dateFormat = "dd.MM.yyyy";

            var model = @Html.Raw(Json.Encode(Model));
            var selectedBelegungen = model.FahrerTagBelegungen;
            var feiertageAsString = model.FeiertageAsString;
            PrepareModelDateProperties();

            function PrepareModelDateProperties() {
                // convert all date properties 
                //   from WCF compatible format ("/Date(9991231231)/")  
                //   to Date object (new Date())
                $(selectedBelegungen).each(function(index, belegung) {
                    belegung.Datum = GetDateFromJson(belegung.Datum);
                });
            }

            function FahrerMeldungFormComplete() {
                FormPrepareAjax();
                Init();
                
                SpanAlertWarning("DatePickerMessage", "Abbruch erfolgreich, es wurden keine Belegungen gespeichert.", 1800);
            }

            DocumentReadyBind(function() {
                Init();
            });
            
            function Init() {
                $("#FahrerAnzahl").spinner({min : 1, max : 25}).removeClass("ui-spinner-input");

                ShowHideFahrerAnzahl(model.BelegungsTyp, false);
                ShowHideKommentar(model.BelegungsTyp, false);
                $("input[name=BelegungsTypAsInt]").on("click", function() {
                    ShowHideFahrerAnzahl($(this).val(), true);
                    ShowHideKommentar($(this).val(), true);
                });
                
                InitInlineDatepicker("ui_date_picker_inline");

                InitRadioButtons();
            }
            
            function InitRadioButtons() {
                InitRadioButtonCssClasses();
            }

            function InitRadioButtonCssClasses() {
                
                // set the checked radio button
                var belegungsCssClasses = new Array("verfuegbar", "eingeschraenktverfuegbar", "nichtverfuegbar", "urlaub", "krank");
                for (var i=0; i<=belegungsCssClasses.length; i++)
                    $("span input[value=" + (i+1) + "]").parents("label.radio").addClass("radio-" + belegungsCssClasses[i]);
            }
            
            function ShowHideFahrerAnzahl(belegungsTyp, animate) {
                var div = $("#FahrerAnzahl").closest(".control-group");
                if (belegungsTyp == "1") 
                    animate ? div.slideDown(200) : div.show(); 
                else 
                    animate ? div.slideUp(100) : div.hide();
            }
            
            function ShowHideKommentar(belegungsTyp, animate) {
                var div = $("#Kommentar").closest(".control-group");
                if (belegungsTyp == "2" || belegungsTyp == "3") 
                    animate ? div.slideDown(200) : div.show(); 
                else 
                    animate ? div.slideUp(100) : div.hide();
            }

            function getBelegungsTypText(belegung) {
                var cssClass = getBelegungsCssClass(belegung.BelegungsTyp);
                if (cssClass == "") 
                    return "";

                var text = cssClass.replace(/nichtverfuegbar/g, 'nicht verfuegbar');
                text = text.replace(/eingeschraenktverfuegbar/g, 'eingeschraenkt verfuegbar').replace(/ae/g, 'ä').replace(/ue/g, 'ü');

                return text;
            }

            function InitInlineDatepicker(datepickerID) {

                var $datePickerID = "#" + datepickerID;
                var datePicker = $($datePickerID);

                datePicker.datepicker({
                    
                    onSelect: function (dateText, inst) {
                        var date = Date.parseExact(dateText, dateFormat);
                        setBelegung(date, getBelegungsType(), getFahrerCount(), getComment());
                        DatepickerRefreshCustomUI($datePickerID);
                    },
                    
                    beforeShowDay: function (date) {
                        var tooltip;
                        setTimeout(function() {
                             $(".ui-state-active").removeClass('ui-state-active');
                             $(".ui-state-highlight").removeClass('ui-state-highlight');
                             $(".ui-state-hover").removeClass('ui-state-hover');
                        }, 1);
                        var belegung = getBelegungFromDate(date);
                        if (belegung != null) {
                            var cssClass = getBelegungsCssClass(belegung.BelegungsTyp);
                            if (cssClass == "") 
                                return [true, ""];

                            tooltip = getBelegungsTypText(belegung);
                            
                            return [true, "date-selected date-" + cssClass, tooltip];
                        }
                        
                        // no weekends please
                        var dateIsSelectable = !(date.getDay() == 0 || date.getDay() == 6); 

                        // only today and later
                        if (dateIsSelectable)
                            dateIsSelectable = (date >= Date.today()); // && date < Date.today().addMonths(3));
                        
                        var istFeiertag = feiertageAsString.indexOf(date.toString(dateFormat)) >= 0;
                        if (dateIsSelectable)
                            dateIsSelectable = !istFeiertag;
                        tooltip = (istFeiertag ? "Feiertag!" : (dateIsSelectable ? "bisher keine Zuordnung" : "Wochenende!"));
                        
                        return [dateIsSelectable, "", tooltip];
                    },
                    
                    showWeek: true,
                    selectWeek: true,
                    onChangeMonthYear: function () { DatepickerRefreshCustomUI($datePickerID); }
                });
                
                $($datePickerID + ' .ui-datepicker-calendar tr').live('mousemove', function() { $(this).find('td a').removeClass('ui-state-hover'); });

                datePicker.datepicker("refresh");
                DatepickerRefreshCustomUI($datePickerID);
            }

            function DatepickerRefreshCustomUI($datePickerID) {
                setTimeout(function () {
                    DatepickerPrepareWeeks($datePickerID);
                    DatepickerPrepareDays($datePickerID);
                    $(".tooltips").tooltip();
                }, 0);
            }
            
            function SaveSelectedBelegungen() {
                $.ajax({
                    type: "POST",
                    dataType: 'json',
                    url: "SaveSelectedBelegungen",
                    data : {
                         model: JSON.stringify(model),
                         fahrerAnzahl: getFahrerCount(),
                         comment: getComment(),
                         belegungsType: getBelegungsType()
                    },
                    loadingShow: false,
                    success: function (result) {
                        SpanAlertSuccess("DatePickerMessage", "Ihre Belegungen wurden erfolgreich gespeichert!", 1800);
                    },
                    error: function (jqXhr) {
                        SpanAlertAjaxError("DatePickerMessage", jqXhr);
                    }
                });    
                
                return false;
            }


            function getFahrerCount() {
                return $("#FahrerAnzahl").val();
            }

            function getComment() {
                return $("#Kommentar").val();
            }
            
            function incrementFahrer(increment) {
                var spinnerMode = "step" + increment;
                $("#FahrerAnzahl").spinner(spinnerMode);
                return false;
            }

            function clearComment() {
                $("#Kommentar").val("");
                return false;
            }

            function getBelegungsType() {
                return parseInt($("input[name=BelegungsTypAsInt]:radio:checked").val(), 10);
            }

            function getBelegungsCssClass(belegungsType) {
                if (belegungsType == 0)
                    return "";

                switch (belegungsType) {
                    case 1: return "verfuegbar";
                    case 2: return "eingeschraenktverfuegbar";
                    case 3: return "nichtverfuegbar";
                    case 4: return "urlaub";
                    case 5: return "krank";
                }

                return "";
            }

            function getBelegungFromDate(dateToFind, debug) {
                var items = $.grep(selectedBelegungen, function(belegung) {
                    if (debug)
                        ;//alert(dateToFind + " - " + belegung.Datum);
                    return belegung.Datum.toString() == dateToFind.toString();
                });
                return (items && items.length > 0) ? items[0] : null;
            }
            function newBelegungFromDate(date) {
                return newBelegung(date, getBelegungsType(), getFahrerCount(), getComment());
            }
            function newBelegung(date, belegungType, fahrerCount, comment) {
                return {
                     Datum: date, 
                     BelegungsTyp: belegungType, 
                     FahrerAnzahl: fahrerCount,
                     Kommentar: comment,
                };
            }
            function addBelegung(item) {
                if (item.Datum == null)
                    return;
                
                if (getBelegungFromDate(item.Datum) == null)
                    selectedBelegungen.push(item);
            }
            function removeBelegung(item) {
                if (item.Datum == null)
                    return;

                var belegung = getBelegungFromDate(item.Datum);
                if (belegung != null) {
                    belegung.BelegungsTyp = belegung.FahrerAnzahl = 0;
                    belegung.Kommentar = "";
                }
            }
            function addOrRemoveBelegungExplicitely(item, remove) {
                var existingItem = getBelegungFromDate(item.Datum);
                if (remove)
                    removeBelegung(existingItem);
                else 
                    addBelegung(item);
            }

            function DatepickerPrepareWeeks($datePickerID) {

                $($datePickerID + " td.ui-datepicker-week-col")
                    .wrapInner($("<a/>")
                        .attr("href", "#")
                        .addClass("ui-state-week")
                        .setTooltip("Diese Arbeitswoche selektieren", "top")
                        .on("click", function () {
                            DatepickerSelectWeek($datePickerID, $(this).closest("td"));
                            return false;
                        })
                    );
            }

            function DatepickerPrepareDays($datePickerID) {

                var kommentare = [];
                $($datePickerID + " td.date-selected")
                    .each(function() {
                        var date = getDayFromTableCell($(this));
                        var belegung = getBelegungFromDate(date);
                        if (belegung != null && (belegung.BelegungsTyp == 1)) 
                            $(this).children("a").addClass("fahrer-anzahl-bg-" + belegung.FahrerAnzahl);
                        if (belegung != null && (belegung.BelegungsTyp == 2 || belegung.BelegungsTyp == 3)) {
                            var a = $(this);
                            a.attr("title", a.attr("title") + ": " + belegung.Kommentar);
                            kommentare.push(belegung);
                        }
                    });

                PrepareKommentarGrid(kommentare);
                $(".tooltips").tooltip();
            }

            function PrepareKommentarGrid(kommentare) {
                var grid = $("#kommentar-grid");
                grid.html("");
                if (kommentare.length == 0)
                    return;

                grid.append($("<table></table>"));
                var tb = grid.find("table");
                tb.append("<tr></tr>");
                var tr = tb.find("tr").last();
                tr.append("<th>Tag</th>");
                tr.append("<th>Bemerkung</th>");
                $.each(kommentare, function(i, belegung) {
                    var cssClass = getBelegungsCssClass(belegung.BelegungsTyp);
                    tb.append("<tr></tr>");
                    tr = tb.find("tr").last();
                    tr.append("<td>" + belegung.Datum.toString("dd.MM.") + "</td>");
                    tr.append("<td class='radio-" + cssClass + "'>" + belegung.Kommentar + "</td>");
                });
            }

            function DatepickerSelectWeek($datePickerID, weekTdNode) {
                
                var thisWeekDays = $.map(weekTdNode.nextAll("td").slice(0, 5),
                                         function (td) { return getDayFromTableCell($(td)); }
                                    );

                $(thisWeekDays).each(function (index, weekDay) {
                    setBelegung(weekDay, getBelegungsType(), getFahrerCount(), getComment());
                });
                   
                $($datePickerID).datepicker("refresh");
                DatepickerRefreshCustomUI("#ui_date_picker_inline");
            }
            
            function getDayFromTableCell(td) {
                var day = $(td).children("a").html();

                return new Date($(td).data('year'), $(td).data('month'), day);
            }

            function setBelegung(day, belegungsType, fahrerAnzahl, comment) {
                if (day == null || day == "Invalid Date") 
                    return;

                var belegung = newBelegungFromDate(day);
                var remove = (belegungsType == 0);
                var existingItem = getBelegungFromDate(day);
                if (existingItem != null && !remove) {
                    existingItem.BelegungsTyp = belegungsType;
                    existingItem.FahrerAnzahl = fahrerAnzahl;
                    existingItem.Kommentar = comment;
                    return;
                }
                addOrRemoveBelegungExplicitely(belegung, remove);
            }

            function TestSetselectedBelegungen() {
                var datePicker = $("#ui_date_picker_inline");
                addBelegung("13.01.2014");
                addBelegung("14.01.2014");
                datePicker.datepicker("refresh");
                DatepickerRefreshCustomUI("#ui_date_picker_inline");
            }

            function TestCalcDimensions() {
                var $window = $(window);
                $("#calcDim").html($window.width() + " - " + $window.height());
            }

        </script>
    }
</div>