@model LoginModel

<style>

    #noaccess-needhelp,
    #forget-password {
        color: black !important;
    }

</style>

<div id="DivLogin">
    @using (Ajax.BeginForm("LoginForm", "Login", null,
                           new MvcAjaxOptions { UpdateTargetId = "DivLogin", OnComplete = "AjaxFormLoginComplete();" },
                           new { @class = "no-loading-indicator form-vertical login-form", id = "AjaxFormLogin" }))
    {
        @Html.HiddenFor(m => m.ModePasswordReset)
        @Html.HiddenFor(m => m.ModeCaptchaReset)

        if (!Model.ModePasswordReset)
        {
            <div id="login-loader" class="alert alert-info margin-top-30 hide">
                @Html.Win8Loader() @Localize.LoginInProcess
            </div>

            <div id="loginDiv">
                 <h3 class="form-title">@Localize.LoginToYourAccount2</h3>

                 @if (Model.IsValid)
                 {
                     if (Model.MaintenanceInfo != null && Model.MaintenanceInfo.MessagesToConfirmAvailable)
                     {
                         <div id="login-messages-to-confirm" class="alert alert-info no-padding">
                             <div class="padding-10">
                                @Html.Partial("Partial/MaintenanceHintsInformationToConfirm", Model.MaintenanceInfo)

                                <div class="form-actions no-bottom-margin">
                                    <button onclick="RedirectFromLoginPage(true);" class="btn green pull-right">
                                        <i class="icon-chevron-right m-icon-white"></i> @Localize.LoginAndDoNotShowAgain
                                    </button>
                                    <button onclick="RedirectFromLoginPage(false);" class="btn blue pull-right margin-top-10">
                                        <i class="icon-chevron-right m-icon-white"></i> @Localize.Login
                                    </button>
                                </div>
                             </div>
                         </div>
                     }
                 }
                 else
                 {
                     @Html.FormPlaceholderTextBoxFor(m => m.UserName, new { @class = "m-wrap placeholder-no-fix", autocomplete = "off" }, "icon-user")

                     @Html.FormPlaceholderTextBoxFor(m => m.Password, new { @class = "m-wrap placeholder-no-fix", type = "password", autocomplete = "off" }, "icon-lock")

                     <div class="form-actions">
                         <button type="submit" class="btn blue pull-right loginbtn">
                             <i class="icon-chevron-right m-icon-white"></i> @Localize.Login
                         </button>
                     </div>

                     <div class="forget-password">
                         <h4><a href="javascript:RequestSwitchMode(true);" id="forget-password"><i class="icon-chevron-right"></i> @Localize.PasswordForgottenQuestion2</a></h4>
                     </div>
                     <div class="forget-password">
                        <h4><a href="javascript:NoAccessNeedHelp();" id="noaccess-needhelp"><i class="icon-chevron-right"></i> @Localize.NoAccessNeedHelp </a></h4>
                    </div>
                 }
            </div>
        }

        if (Model.ModePasswordReset)
        {
            <div id="passworResetDiv">
                <h3 class="form-title smaller">@Localize.PasswordRequestNew</h3>

                @if (Model.IsValid)
                {
                    if (Model.PasswordResetCustomerAdminInfo.IsNotNullOrEmpty())
                    {
                        <div class="alert alert-warning">
                            <i class="icon-info margin-right-5"></i>
                            @(new HtmlString(Model.PasswordResetCustomerAdminInfo))
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-success">
                            <i class="icon-envelope margin-right-5"></i>
                            @Localize.PasswordResetLinkEmailWasSent
                        </div>
                    }
                }
                else
                {
                    @Html.FormPlaceholderTextBoxFor(m => m.UserName, new { @class = "m-wrap placeholder-no-fix", autocomplete = "off" }, "icon-user")

                    <div class="captcha-wrapper">
                        <img src="~/Shared/Captcha?id=@Guid.NewGuid()" alt="captcha" class="captcha-image" />
                        <span onclick="return ResetCaptcha();" class="btn blue mini">
                            <i class="halflings-icon refresh white"></i>
                        </span>
                    </div>

                    @Html.FormPlaceholderTextBoxFor(m => m.CaptchaText, new { @class = "m-wrap placeholder-no-fix", autocomplete = "off" }, "icon-picture")

                    <div class="form-actions">
                        <button type="submit" class="btn blue pull-right pwbtn">
                            <i class="icon-chevron-right m-icon-white"></i> @Localize.PasswordRequestNew
                        </button>
                    </div>
                }

                <div class="forget-password margin-top-10">
                    <h4><a href="javascript:RequestSwitchMode(false);" id="forget-password"><i class="icon-chevron-right"></i> @Localize.Login</a></h4>
                </div>
            </div>
        }

        <script type="text/javascript">

            _modePasswordReset = @Model.ModePasswordReset.ToString().ToLower();
            _modeCaptchaReset = @Model.ModeCaptchaReset.ToString().ToLower();
            _modelIsValid = @Model.IsValid.ToString().ToLower();
            _modelMessagesToConfirmAvailable = @((Model.MaintenanceInfo != null && Model.MaintenanceInfo.MessagesToConfirmAvailable).ToString().ToLower());

            if (!_modeCaptchaReset)
                AutoFocusDelayed('UserName');
            $("#ModeCaptchaReset").val(false);

            if (_modelIsValid) {
                if (!_modePasswordReset && !_modeCaptchaReset) {
                    if (!_modelMessagesToConfirmAvailable) {
                        RedirectFromLoginPage(true);
                    }
                }
            }

            function RedirectFromLoginPage(dontShowMessagesAgain) {
                var redirectUrl = unescape('@Model.RedirectUrl');
                redirectUrl = (redirectUrl != '' ? redirectUrl  : '../');

                $("#loginDiv").html("");
                $("#loginDiv").hide();
                $("#login-loader").show();

                if (!dontShowMessagesAgain) {
                    location.replace(redirectUrl);
                    return;
                }

                $.ajax(
                {
                    type: "POST",
                    url: "/ServicesMvc/Login/ConfirmActiveMessagesDontShowAgain",
                    data: { },
                    loadingShow: false,
                    success: function (result) {
                        location.replace(redirectUrl);
                    }
                });
            }

            function RequestSwitchMode(modeResetPassword) {
                $("#ModePasswordReset").val(modeResetPassword);
                $("#AjaxFormLogin").submit();
            }

            function ResetCaptcha() {
                $("#ModeCaptchaReset").val(true);
                $("#AjaxFormLogin").submit();
                return false;
            }

            function NoAccessNeedHelp() {
                var redirectUrl = "/ServicesMvc/Login/Customer";
                location.replace(redirectUrl);
            }
        </script>
    }
</div>
