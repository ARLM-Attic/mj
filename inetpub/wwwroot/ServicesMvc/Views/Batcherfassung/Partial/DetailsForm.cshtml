@using CkgDomainLogic.FzgModelle.Models
@using System.Collections.Generic
@model Batcherfassung

<div id="divBatcherfassungDetailsForm">
    @using (Ajax.BeginForm("BatcherfassungDetailsFormSave", "Batcherfassung", null,
                new MvcAjaxOptions { UpdateTargetId = "divBatcherfassungDetailsForm", OnComplete = "BatcherfassungAjaxFormComplete();" },
                    htmlAttributes: new { @class = "form-horizontal", id = "BatcherfassungAjaxForm" }))
    {

        @Html.FormValidationSummary()
      
        @Html.HiddenFor(m => m.ObjectKey)
        @Html.HiddenFor(m => m.InsertModeTmp)       
        @Html.HiddenFor(m => m.Fahrzeuggruppe) 
        @Html.HiddenFor(m => m.Bemerkung) 
    

        if (Model.InsertModeTmp)
        {
            @Html.FormTextBoxFor(m => m.ID, new { @class = "m-wrap medium", col = "left" })
        }
        else
        {           
            @Html.HiddenFor(m => m.ID)
            @Html.FormTextBlockFor(m => m.ID, new { @class = "m-wrap medium", col = "left" })
        }                         
        @Html.FormTextBoxFor(m => m.ModellId, new { @class = "m-wrap ", col = "right", @onchange = "return TryLoadDataByModelId();" })
        @*@Html.FormDropDownListFor(m => m.ModellId, Model.ModelList, new { @class = "m-wrap X-large", col = "right", @onchange = "return false" })*@
        
        @Html.FormTextBoxFor(m => m.Modellbezeichnung, new { @class = "m-wrap ", col = "left" })
        @Html.FormTextBoxFor(m => m.SippCode, new { @class = "m-wrap ", col = "right" })

        if (Model.InsertModeTmp)
        {           
            @Html.FormDropDownListFor(m => m.HerstellerName, Model.HerstellerList, new { @class = "m-wrap large", col = "left" })
        }
        else
        {           
            @Html.FormTextBoxFor(m => m.HerstellerName, new { @class = "m-wrap medium", col = "left" })
        }
        @Html.FormTextBoxFor(m => m.Anzahl, new { @class = "m-wrap large", col = "right" })
                                                     
        @Html.FormTextBoxFor(m => m.Laufzeit, new { @class = "m-wrap large", col = "left" })
        @Html.FormCheckBoxFor(m => m.Laufzeitbindung, new { @class = "m-wrap large", col = "right" }, labelHidden: true)
        
        @Html.FormTextBoxFor(m => m.LiefermonatBAPIFormat, new { @class = "m-wrap large", col = "left" })
        @Html.FormDropDownListFor(m => m.Antrieb, Model.AntriebeList.ToSelectList(), new { @class = "m-wrap large", col = "right" })
               
        @Html.FormDropDownListFor(m => m.AuftragsnummerVon, Model.AuftragsnummrList, new { @class = "m-wrap large", col = "left" })
        @Html.FormDropDownListFor(m => m.AuftragsnummerBis, Model.AuftragsnummrList, new { @class = "m-wrap large", col = "right" })
                     
        @Html.FormCheckBoxFor(m => m.Winterreifen, new { @class = "m-wrap large", col = "left" }, labelHidden: true)
        @Html.FormCheckBoxFor(m => m.AnhaengerKupplung, new { @class = "m-wrap large", col = "right" }, labelHidden: true)

        @Html.FormCheckBoxFor(m => m.NaviVorhanden, new { @class = "m-wrap large", col = "left" }, labelHidden: true)        
        @Html.FormCheckBoxFor(m => m.Bluetooth, new { @class = "m-wrap large", col = "right" }, labelHidden: true)
            
        @Html.FormCheckBoxFor(m => m.KennzeichenLeasingFahrzeug, new { @class = "m-wrap large", col = "left" }, labelHidden: true)       
        @Html.FormCheckBoxFor(m => m.SecurityFleet, new { @class = "m-wrap large", col = "right" }, labelHidden: true)    
        
        // -> TODO Deko, Abgrenzung, 
                
        @Html.FormTextBoxFor(m => m.UnitnummerVon, new { @class = "m-wrap large", col = "left", @onblur = "return TryCalculateUnitNumbers(this)" })
        @Html.FormTextBoxFor(m => m.UnitnummerBis, new { @class = "m-wrap large", col = "right", @onblur = "return TryCalculateUnitNumbers(this)" })
             
        <div id="divValidationError" class="hide" >
            {@Html.FormTextBlockFor(m => m.ValidationError, new { @class = "m-wrap medium error" })}        
        </div>       
                                
        <div id="divExcelUpload" class="left">       
            @Html.FormWizard("icon-arrow-up", "", new[] { "Excel Datei hochladen", "Fertig!" })

            <div id="formWizardTab1" >      
                @Html.Partial("ExcelUpload/FileUpload")                                                                                   
            </div>
        </div>        
        @Html.FormTextAreaFor(m => m.Unitnummern, new { @class = "m-wrap large right" })
               
        @Html.FormRequiredFieldsSummary()

        
        <div class="form-actions">
            <button type="submit" class="btn green"><i class="icon-ok"></i> @Localize.Save</button>
            <button type="button" class="btn" onclick="CloseItemDetails();">@Localize.Cancel</button>
        </div>

        <script type="text/javascript">
            _modelIsValid = @ViewContext.ViewData.ModelState.IsValid.ToString().ToLower();
        </script>
    }
</div>

<script type="text/javascript">

</script>
