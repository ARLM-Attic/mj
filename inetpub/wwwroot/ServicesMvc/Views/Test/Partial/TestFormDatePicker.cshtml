@using ServicesMvc.Models
@model TestFilterModel2 

<div id="divTestForm" class="">
    @using (Ajax.BeginForm("TestForm2Save", "Test", null, new MvcAjaxOptions("divTestForm") { OnComplete = "TestFormDatePickerPrepareComplete();" }, htmlAttributes: new { @class = "form-horizontal form-row-stripped formlabelwidth200", id = "ajaxForm" }))
    {
        @Html.FormValidationSummary()

        <button id="setDts" type="button" class="btn hide" onclick="TestSetselectedBelegungen();">Set Dates</button>
        <button id="calcDim" type="button" class="btn hide" onclick="TestCalcDimensions();"></button>

        @Html.FormRadioButtonListFor(m => m.BelegungsTypAsInt, TestFilterModel2.BelegungsTypen)

        @Html.FormTextBoxFor(m => m.FahrerAnzahl, new { @class = "m-wrap xsmall", data_min = "1", data_max = "9" },
                             postControlHtml: @<text>
                                                    <a class="btn margin-left-15" href="#" onclick="return incrementFahrer('Up');"><i class="icon-plus"></i></a> 
                                                    <a class="btn" href="#" onclick="return incrementFahrer('Down');"><i class="icon-minus"></i></a> 
                                                </text>)
        
        <div id="ui_date_picker_inline" class="datepicker-inline"></div>
        
        <div class="form-actions">
            <button type="button" class='btn blue' onclick="return SaveSelectedBelegungen()"><i class='icon-save'></i>&nbsp;Speichern</button>
            <button type="submit" class='btn grey'><i class='icon-remove'></i>&nbsp;Abbrechen</button>
        </div>
        
        @Html.FormRequiredFieldsSummary()

   
        <script type="text/javascript">

            var dateFormat = "dd.MM.yyyy";

            var model = @Html.Raw(Json.Encode(Model));
            var selectedBelegungen = model.FahrerTagBelegungen;
            var feiertageAsString = model.FeiertageAsString;
            prepareModelDateProperties();

            function prepareModelDateProperties() {
                // convert all date properties 
                //   from WCF compatible format ("/Date(9991231231)/")  
                //   to Date object (new Date())
                $(selectedBelegungen).each(function(index, belegung) {
                    belegung.Datum = GetDateFromJson(belegung.Datum);
                });
                
//                $(feiertage).each(function(index, day) {
//                    day.Datum = GetDateFromJson(day.Datum);
//                });
            }

            function TestFormDatePickerPrepareComplete() {
                FormPrepareAjax();
                Init();
            }

            DocumentReadyBind(function() {
                Init();
            });
            
            function Init() {
                $("#FahrerAnzahl").spinner({min : 1, max : 10}).removeClass("ui-spinner-input");

                ShowHideFahrerAnzahl(model.BelegungsTyp, false);
                $("input[name=BelegungsTypAsInt]").on("click", function() {
                    ShowHideFahrerAnzahl($(this).val(), true);
                });
                
                InitInlineDatepicker("ui_date_picker_inline");
            }
            
            function ShowHideFahrerAnzahl(belegungsTyp, animate) {
                var div = $("#FahrerAnzahl").closest(".control-group");
                if (belegungsTyp == "1") 
                    animate ? div.slideDown(200) : div.show(); 
                else 
                    animate ? div.slideUp(100) : div.hide();
            }

            function InitInlineDatepicker(datepickerID) {

                var $datePickerID = "#" + datepickerID;
                var datePicker = $($datePickerID);

                datePicker.datepicker({
                    
                    onSelect: function (dateText, inst) {
                        var date = Date.parseExact(dateText, dateFormat);
                        setBelegung(date, getBelegungsType(), getFahrerCount());
                        DatepickerRefreshCustomUI($datePickerID);
                    },
                    
                    beforeShowDay: function (date) {
                        var tooltip;
                        setTimeout(function() {
                             $(".ui-state-active").removeClass('ui-state-active');
                             $(".ui-state-highlight").removeClass('ui-state-highlight');
                             $(".ui-state-hover").removeClass('ui-state-hover');
                        }, 1);
                        var belegung = getBelegungFromDate(date);
                        if (belegung != null) {
                            var cssClass = getBelegungsCssClass(belegung.BelegungsTyp);
                            if (cssClass == "") 
                                return [true, ""];
                            tooltip = cssClass.replace(/nichtverfuegbar/g, 'nicht verfuegbar').replace(/ue/g, 'ü');
                            
                            return [true, "date-selected date-" + cssClass, tooltip];
                        }
                        
                        // no weekends please
                        var dateIsSelectable = !(date.getDay() == 0 || date.getDay() == 6); 

                        // only today and later
                        if (dateIsSelectable)
                            dateIsSelectable = (date >= Date.today()); // && date < Date.today().addMonths(3));
                        
                        // depricated, holding all "feiertage" as models in an array is not performant:
//                      var thisDateAsFeiertag = $.grep(feiertage, function(feiertag) { return date.toString(dateFormat) == feiertag.Datum.toString(dateFormat); });
//                      var thisFeiertag = (thisDateAsFeiertag.length == 0 ? null : thisDateAsFeiertag[0]);
//                      if (dateIsSelectable)
//                          dateIsSelectable = (thisFeiertag == null);
//                      tooltip = (thisFeiertag != null ? "Feiertag: " + thisFeiertag.Name : (dateIsSelectable ? "bisher keine Zuordnung" : "Wochenende!"));
                        
                        var istFeiertag = feiertageAsString.indexOf(date.toString(dateFormat)) >= 0;
                        if (dateIsSelectable)
                            dateIsSelectable = !istFeiertag;
                        tooltip = (istFeiertag ? "Feiertag!" : (dateIsSelectable ? "bisher keine Zuordnung" : "Wochenende!"));
                        
                        return [dateIsSelectable, "", tooltip];
                    },
                    
                    showWeek: true,
                    selectWeek: true,
                    onChangeMonthYear: function () { DatepickerRefreshCustomUI($datePickerID); }
                });
                
                $($datePickerID + ' .ui-datepicker-calendar tr').live('mousemove', function() { $(this).find('td a').removeClass('ui-state-hover'); });

                datePicker.datepicker("refresh");
                DatepickerRefreshCustomUI($datePickerID);
            }

            function DatepickerRefreshCustomUI($datePickerID) {
                setTimeout(function () {
                    DatepickerPrepareWeeks($datePickerID);
                    DatepickerPrepareDays($datePickerID);
                    $(".tooltips").tooltip();
                }, 0);
            }
            
            function SaveSelectedBelegungen() {
                $.ajax({
                    type: "POST",
                    dataType: 'json',
                    url: "SaveSelectedBelegungen",
                    data : {
                         model: JSON.stringify(model),
                         fahrerAnzahl: getFahrerCount(),
                         belegungsType: getBelegungsType()
                    },
                    loadingShow: false,
                    success: function (result) {
                        //alert('ok');
                    },
                    error: function (jqXhr, exception) {
                        alert(jqXhr.responseText);
                    }
                });    
                
                return false;
            }


            function getFahrerCount() {
                return $("#FahrerAnzahl").val();
            }
            
            function incrementFahrer(increment) {
                var spinnerMode = "step" + increment;
                $("#FahrerAnzahl").spinner(spinnerMode);
                return false;
            }

            function getBelegungsType() {
                return parseInt($("input[name=BelegungsTypAsInt]:radio:checked").val(), 10);
            }

            function getBelegungsCssClass(belegungsType) {
                if (belegungsType == 0)
                    return "";

                switch (belegungsType) {
                    case 1: return "verfuegbar";
                    case 2: return "nichtverfuegbar";
                    case 3: return "urlaub";
                    case 4: return "krank";
                }

                return "";
            }

            function getBelegungFromDate(dateToFind, debug) {
                var items = $.grep(selectedBelegungen, function(belegung) {
                    if (debug)
                        ;//alert(dateToFind + " - " + belegung.Datum);
                    return belegung.Datum.toString() == dateToFind.toString();
                });
                return (items && items.length > 0) ? items[0] : null;
            }
            function newBelegungFromDate(date) {
                return newBelegung(date, getBelegungsType(), getFahrerCount());
            }
            function newBelegung(date, belegungType, fahrerCount) {
                return {
                     Datum: date, 
                     BelegungsTyp: belegungType, 
                     FahrerAnzahl: fahrerCount
                };
            }
            function addBelegung(item) {
                if (item.Datum == null)
                    return;
                
                if (getBelegungFromDate(item.Datum) == null)
                    selectedBelegungen.push(item);
            }
            function removeBelegung(item) {
                var index = selectedBelegungen.indexOf(item);
                if (index >= 0)
                    selectedBelegungen.splice(index, 1);
            }
            function addOrRemoveBelegungExplicitely(item, remove) {
                var existingItem = getBelegungFromDate(item.Datum);
                if (remove)
                    removeBelegung(existingItem);
                else 
                    addBelegung(item);
            }

            function DatepickerPrepareWeeks($datePickerID) {

                $($datePickerID + " td.ui-datepicker-week-col")
                    .wrapInner($("<a/>")
                        .attr("href", "#")
                        .addClass("ui-state-week")
                        .setTooltip("Diese Arbeitswoche selektieren", "top")
                        .on("click", function () {
                            DatepickerSelectWeek($datePickerID, $(this).closest("td"));
                            return false;
                        })
                    );
            }

            function DatepickerPrepareDays($datePickerID) {

                $($datePickerID + " td.date-selected")
                    .each(function() {
                        var date = getDayFromTableCell($(this));
                        var belegung = getBelegungFromDate(date);
                        if (belegung != null && belegung.BelegungsTyp == 1)
                            //$(this).append($("<span class='fahrer-anzahl'/>").html(belegung.FahrerAnzahl + " Fahrer"));
                            $(this).children("a").addClass("fahrer-anzahl-bg-" + belegung.FahrerAnzahl);
                    });
            }

            function DatepickerSelectWeek($datePickerID, weekTdNode) {
                
                var thisWeekDays = $.map(weekTdNode.nextAll("td").slice(0, 5),
                                         function (td) { return getDayFromTableCell($(td)); }
                                    );
                //var countSelectedWeekDays = $.grep(thisWeekDays, function(weekDay) { return getBelegungFromDate(weekDay) != null; }).length;
                // deselectAll <==>  alle 5 Werktage waren schon ausgewählt => also alle 5 de-markieren:
                //var removeWeekItems = (countSelectedWeekDays == 5);
                //alert(countSelectedWeekDays);
                $(thisWeekDays).each(function (index, weekDay) {
                    setBelegung(weekDay, getBelegungsType(), getFahrerCount());
                });
                   
                $($datePickerID).datepicker("refresh");
                DatepickerRefreshCustomUI("#ui_date_picker_inline");
            }
            
            function getDayFromTableCell(td) {
                var day = $(td).children("a").html();

                return new Date($(td).data('year'), $(td).data('month'), day);
            }

            function setBelegung(day, belegungsType, fahrerAnzahl) {
                if (day == null || day == "Invalid Date") 
                    return;

                var belegung = newBelegungFromDate(day);
                var remove = (belegungsType == 0);
                var existingItem = getBelegungFromDate(day);
                if (existingItem != null && !remove) {
                    existingItem.BelegungsTyp = belegungsType;
                    existingItem.FahrerAnzahl = fahrerAnzahl;
                    return;
                }
                addOrRemoveBelegungExplicitely(belegung, remove);
            }

            function TestSetselectedBelegungen() {
                var datePicker = $("#ui_date_picker_inline");
                addBelegung("13.01.2014");
                addBelegung("14.01.2014");
                datePicker.datepicker("refresh");
                DatepickerRefreshCustomUI("#ui_date_picker_inline");
            }

            function TestCalcDimensions() {
                var $window = $(window);
                $("#calcDim").html($window.width() + " - " + $window.height());
            }

        </script>
    }
</div>