@model CkgDomainLogic.Equi.ViewModels.BriefversandViewModel
@using CkgDomainLogic.Equi.Models
@{ var gridName = "GridFahrzeugAuswahl"; }

<h4 class="margin-bottom-20">
    
    <a href="#" onclick="return CsvUpload()" class="btn tooltips margin-right-10" data-original-title="Filtern Sie alternativ die Fahrzeugliste auf Basis Ihrer eigenen CSV Daten!" data-placement="right"> CSV Upload <i class="icon-upload-alt"></i></a>
    <span class="hide">
        @(Html.Telerik().Upload()
            .Name("fileUpload")
            .Multiple(false)
            .Localizable("de-DE")
            .Async(async => async
                                .Save("CsvUploadStart", "Equi")
                                .SaveField("uploadFiles")
                                .AutoUpload(true))
            .Multiple(false)
            .ShowFileList(false)
            .ClientEvents(events => events
                                        .OnUpload("UploadStart")
                                        .OnSuccess("UploadFinished")
                                        .OnError("UploadError"))
          )
    </span>
                  
    @Model.FahrzeugAuswahlTitleHint: 

    <span id="FahrzeugAuswahlCount" class="alert alert-success margin-left-15 hide">
        <i class="icon-check"></i><span class="padding-left-5 bold"></span>
    </span>
</h4> 

@Html.SpanAlert("Message")

@(Html.Telerik()
    .Grid<Fahrzeugbrief>()
    .Name(gridName)
    .XGroup("GridBriefversandFahrzeugAuswahl")
    .XAjaxDataBinding("FahrzeugAuswahlAjaxBinding", "Equi")
    .Columns(columns =>
        {
            columns.XBound("")
                .ClientTemplate("<# if (data.IsMissing) { #> <span><i class='icon-bell margin-left-5'></i></span> <# } else { #><input type='checkbox' name='checkedRecords' <# if (data.IsSelected) { #> checked <# } #> value='<#= data.Fahrgestellnummer #>' onchange='OnSelectionChange_GridFahrzeugAuswahl($(this))' /> <# } #>")
                .HeaderTemplate("<input type='checkbox' id='uncheckAllRecords' onchange='GridFahrzeugAuswahl_OnAllSelectionChange($(this))' />")
                .Filterable(false);

            columns.XBound(c => c.Kennzeichen);
            columns.XBound(c => c.Fahrgestellnummer);
            columns.XBound(c => c.TechnIdentnummer);
            columns.XBound(c => c.Vertragsnummer);
            columns.XBound(c => c.Referenz1);
            columns.XBound(c => c.Referenz2);
            columns.XBound(c => c.StandortText);
            columns.XBound(c => c.Eingangsdatum).Format("{0:dd.MM.yyyy}");
            columns.XBound(c => c.Stilllegungsdatum).Format("{0:dd.MM.yyyy}");
        })

    .XAutoColumnConfiguration()
    .ClientEvents(events => events.XAutoClientEvents(gridName).OnLoad("OnLoad_GridFahrzeugAuswahl").OnRowDataBound("OnRowDataBound_GridFahrzeugAuswahl"))
    .XPageSize(10)
    .XSort(sortOrder => sortOrder.Add(c => c.Fahrgestellnummer).Ascending())

    .ToolBar(commands =>
        {
            commands.FilteredDataCommand("FahrzeugAuswahlExportFilteredExcel", "Equi").HtmlAttributes(new { @class = "hide btn mini gray tooltips excel a_btn_mini", data_original_title = "Excel Export", data_placement = "right" });
            commands.FilteredDataCommand("FahrzeugAuswahlExportFilteredPDF", "Equi").HtmlAttributes(new { @class = "hide btn mini gray tooltips pdf a_btn_mini", data_original_title = "PDF Export", data_placement = "right" });
        })
)
