<!-- BEGIN CORE PLUGINS -->
<script src="~/assets/plugins/jquery-1.8.3.min.js" type="text/javascript"></script>   
<!-- IMPORTANT! Load jquery-ui-1.10.1.custom.min.js before bootstrap.min.js to fix bootstrap tooltip conflict with jquery ui tooltip -->  
    

@(Html.Telerik().ScriptRegistrar().Globalization(true).DefaultGroup(group => group.Combined(true).Compress(true)))
@Scripts.Render("~/bundles/jqueryval")
<script src="~/assets/plugins/jquery-ui/jquery-ui-1.10.1.custom.min.js" type="text/javascript"></script>      
<script src="~/assets/plugins/jquery-ui/jquery.ui.datepicker-de.js" type="text/javascript"></script>      
<script src="~/assets/plugins/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
<!--[if lt IE 9]>
<script src="~/assets/plugins/excanvas.js"></script>
<script src="~/assets/plugins/respond.js"></script>  
<![endif]-->   
<script src="~/assets/plugins/breakpoints/breakpoints.js" type="text/javascript"></script>  
<!-- IMPORTANT! jquery.slimscroll.min.js depends on jquery-ui-1.10.1.custom.min.js --> 
<script src="~/assets/plugins/jquery-slimscroll/jquery.slimscroll.min.js" type="text/javascript"></script>
<script src="~/assets/plugins/jquery.blockui.js" type="text/javascript"></script>  
<script src="~/assets/plugins/jquery.cookie.js" type="text/javascript"></script>
<script src="~/assets/plugins/uniform/jquery.uniform.min.js" type="text/javascript" ></script> 
<!-- END CORE PLUGINS -->

<!-- BEGIN PAGE LEVEL PLUGINS -->
<script type="text/javascript" src="~/assets/plugins/bootstrap-fileupload/bootstrap-fileupload.js"></script>
<script type="text/javascript" src="~/assets/plugins/bootstrap-wizard/jquery.bootstrap.wizard.js"></script>
<script type="text/javascript" src="~/assets/plugins/chosen-bootstrap/chosen/chosen.jquery.min.js"></script>

<script type="text/javascript" src="~/assets/plugins/bootstrap-daterangepicker/date.js"></script>
<script type="text/javascript" src="~/assets/plugins/bootstrap-daterangepicker/daterangepicker.js"></script> 
<script src="~/scripts/form-daterange-picker.js?v=20150126" type="text/javascript"></script>        

<script src="~/assets/scripts/multi-select.js" type="text/javascript"></script>        
<!-- END PAGE LEVEL PLUGINS -->

<!-- BEGIN PAGE LEVEL SCRIPTS -->
<script src="~/assets/scripts/app.js" type="text/javascript"></script>
<script src="~/assets/scripts/index.js" type="text/javascript"></script>        

<script src="~/scripts/spin.js?v=20150126" type="text/javascript"></script>        
<script src="~/scripts/jquery.typing.js?v=20150126" type="text/javascript"></script>        
<script src="~/scripts/jquery.readableXML.js?v=20150126" type="text/javascript"></script>  
<script src="~/scripts/site.js?v=20150126" type="text/javascript"></script>       
   

<!-- END PAGE LEVEL SCRIPTS -->  
<script type="text/javascript">

    jQuery(document).ready(function () {

        App.init(); // InitParameterslayout and core plugins
        //UIJQueryUI.InitParameters();

        FormInitStyles();

        LoadingHide();

        FormPrepareLayoutPrivate();

        FormPreparePrivate();

        PrepareCheckSessionTimeout();

        FormInitJQueryExtensions();
    });

    function FormPrepareAjax(id) {

        App.init(true);

        FormInitStyles(id);

        FormPrepareAjaxLayoutPrivate();
    }
    
    function FormPrepareAjaxDelayed() {
        setTimeout('FormPrepareAjax()', 200);
    }

    function FormInitStyles(id) {
        
        FormInitValidationErrorStyles();

        FormInitDatePicker(id);
        //alert("FormDateRangePickerInit");
        FormDateRangePickerInit();

        InitResponsiveControlWidths();
    }

    function FormInitValidationErrorStyles() {
        if (_controlGroupValidationType == 'default')
            FormInitValidationErrorStyles_ControlGroupDefault();
        if (_controlGroupValidationType == 'individual')
            FormInitValidationErrorStyles_ControlGroupIndividual();

        FormInitValidationSummaryStyles();
    }

    function FormInitValidationSummaryStyles() {
        var formPersistenceModeErrorPrefix = '@MvcTag.FormPersistenceModeErrorPrefix';
        $('.validation-summary-errors').each(function () {
            var span = $(this).find("span");
            if (span.text().indexOf(formPersistenceModeErrorPrefix) < 0)
                $(this).addClass("alert alert-error");
            else 
            {
                // Form Persistence mode, validation "error" acts as success notification hint:
                $(this).addClass("alert alert-success");
                span.text(span.text().replace(/@MvcTag.FormPersistenceModeErrorPrefix/g, ""));
                var lis = $(this).find("ul li");
                lis.each(function() {
                    var li = $(this);
                    li.text(li.text().replace(/@MvcTag.FormPersistenceModeErrorPrefix/g, ""));
                });

                setTimeout(function() {
                    $('.validation-summary-errors').slideUp(200);
                }, 2000);
            }
        });
        $('.field-validation-error').each(function () {
            $(this).removeClass("field-validation-error").addClass("help-inline");
            var controlGroupDiv = $(this).closest('div[class^="control-group"]');
            if (controlGroupDiv != null)
                controlGroupDiv.addClass('error');
        });
    }

    function FormInitValidationErrorStyles_ControlGroupDefault() {
        $('.input-validation-error').each(function () {
            var controlGroupDiv = $(this).closest('div[class^="control-group"]');
            if (controlGroupDiv != null)
                controlGroupDiv.addClass('error');
        });
    }

    function FormInitValidationErrorStyles_ControlGroupIndividual() {
        //alert('x');
        $('.input-validation-error').each(function () {
            var controlGroupDiv = $(this).closest('div[class^="control-group"]');
            if (controlGroupDiv != null) {
                controlGroupDiv.children('.control-label').each(function() {
                    $(this).addClass('input-validation-error');
                });

                controlGroupDiv.children('.controls').children('.no-break-container').each(function () {
                    if ($(this).find('.input-validation-error').length > 0)
                        $(this).addClass('input-validation-error');
                });
            };
        });
    }

    function FormInitDatePicker(id) {

        var formIdSelector = "";
        if (typeof(id) !== 'undefined') {
            formIdSelector = "#AjaxForm" + id + " ";
        }
        //alert(formIdSelector);

        $(formIdSelector + ".datepicker").each(function () {
            var datePicker = $(this);
            datePicker.children("input").datepicker("destroy");
            datePicker.children("input").datepicker();
            
            datePicker.children(".add-on").click(function () {
                datePicker.children("input").each(function () {
                    if ($(this).attr("readonly") != "readonly" && !$(this).is(':disabled'))
                        $(this).datepicker("show");
                });
            });

            datePicker.children("input").each(function () {
                if ($(this).attr("readonly") == "readonly" || $(this).is(':disabled')) {
                    $(this).datepicker("destroy");
                    $(this).removeClass("hasDatepicker").removeAttr('id');
                }
            });
        });

        $.datepicker.regional['de'] = {
            weekHeader: 'Kw',
        };
        $.datepicker.setDefaults($.datepicker.regional['de']);
    }
    
//    function FormProcessReadOnlyControls() {
//        $(".checkbox").each(function () {
//            var cbDiv = $(this);
//            var readonlyInputAvailable = false;
//            cbDiv.find("input[type=checkbox][readonly]").each(function () {
//                //alert(cbDiv.attr('class'));
//                readonlyInputAvailable = true;
//                alert($(this).attr('readonly'));
//                //cbDiv.click(function () { alert($(this).attr('readonly')); });
//            });
//            if (readonlyInputAvailable)
//                alert('readonly');
//        });  
//    }



    //
    // <Loading Hint>
    //
    
    // default ajax requests:
    $.ajaxSetup({
        beforeSend: function () {
            if (this.loadingShow === true)
                LoadingShow();
        },
        complete: function() {
            LoadingHide();
        }
    });

    // ajax forms: "before submit" handler   (note: the ajax form "complete" handler is automatically processed in class "MvcTools.Web.MvcAjaxOptions", Property "OnComplete"
    $("form[data-ajax=true]").live("submit", function (evt) {
        if (false == $(evt.target).hasClass('no-loading-indicator'))
            LoadingShow();
    });

    function LoadingShow() {
        App.blockUI($(".body-container"));
    }

    function LoadingHide() {
        App.unblockUI($(".body-container"));
    }
    
    //
    // </Loading Hint>
    //



    function PrepareCheckSessionTimeout() {
        setTimeout('CheckSessionTimeout()', 30000);
    }

    function CheckSessionTimeout() {

        $.ajax({
            type: "POST",
            url: "CheckLogonTimeout",
            success: function (result) {

                if (typeof (result.timeoutOccurred) !== "undefined" && result.timeoutOccurred) {
                    alert("Sicherheitshinweis:  Ihre Sitzung ist abgelaufen, aus Sicherheitsgründen bitten wir Sie sich neu anzumelden.");

                    if (typeof(parent) !== "undefined" && parent.location.href.toLowerCase().indexOf(".aspx") != -1) {
                        // we are in a iframe here (Services integrated) 
                        // => navigate parent window to our login page
                        
                        //parent.location.replace('/ServicesMvc/Login/Index');
                        parent.location.replace('/Services/Start/Login.aspx');
                        
                    } else {
                        // we are in a full mvc layout page 
                        // => let's refresh our own window only (LogonContext has already been reset inside our session)
                        location.reload();
                    }
                    return;
                }

                PrepareCheckSessionTimeout();
            }
        });
    }

    function SpanAlert(id, message, delay) {
        if (delay == null)
            delay = 2000;
        var span = $("#" + id);
        span.find("span").html(message);
        span.fadeIn(300).delay(delay).fadeOut(300);
    }
    
    function SpanAlertHide(id) {
        var span = $("#" + id);
        span.hide();
    }

    function SpanAlertWarning(id, message, delay) {
        SpanAlert(id + "Warning", message, delay);
    }
    function SpanAlertWarningHide(id) {
        SpanAlertHide(id + "Warning");
    }

    function SpanAlertSuccess(id, message, delay) {
        SpanAlert(id + "Success", message, delay);
    }

    function SpanAlertError(id, message, delay) {
        SpanAlert(id + "Error", message, delay);
    }

    function SpanAlertAjaxError(id, jqXhr) {
        var errorHeader = '@Localize.SystemErrorOccurred';
        SpanAlert(id + "Error", errorHeader + ' <br />' + getAjaxErrorMessage(jqXhr), 10000);
    }



    // <Grid Multi Select>

    function Grid_PrepareMultiRowSelected(gridName, rowBackgroundSelectionDisabled) {

        $("#" + gridName + " table tbody tr").each(function () {
            var tr = $(this);
            tr.addClass('t-grid-multi-row-select');
            tr.find('td input[type=checkbox]').each(function () {
                Grid_FormatMultiRowSelected(tr, this.checked);
                $(this).change(function () { Grid_FormatMultiRowSelected(tr, this.checked); });
            });
        });
        
        if (typeof (rowBackgroundSelectionDisabled) == 'undefined' || !rowBackgroundSelectionDisabled)
            $("#" + gridName + " table tbody tr").click(function (e) {
                var clickedElement = e.target;
                var tr = $(this);
                tr.find('td input[type=checkbox]').each(function () {
                    if (this == clickedElement)
                        return false;

                    this.checked = !($(this).is(':checked'));
                    $.uniform.update($(this));
                    //Grid_FormatMultiRowSelected(tr, this.checked);
                    $(this).trigger('change');
                    return true;
                });
            });
    }

    function Grid_FormatMultiRowSelected(tr, check) {
        var classSuffix = tr.hasClass("t-alt") ? "-alt" : "";
        if (check)
            tr.addClass("t-grid-selected" + classSuffix);
        else
            tr.removeClass("t-grid-selected" + classSuffix);
    }

    // </Grid Multi Select>


    // <Grid all column search>

    function FilterGrid(gridID, page) {
        if (typeof(page) == 'undefined')
            page = 1;
        
        $("#" + gridID + " .grid-column-overall-filter").each(function() {
             FilterGridAllColumns($(this), page);
        });
    }

    function FilterGridPreservePage(gridID) {
        var grid = $("#" + gridID).data("tGrid");
        FilterGrid(gridID, grid.currentPage);
    }

    function FilterGridInit(gridID) {
        $("#" + gridID + " .grid-column-overall-filter").each(function() {

            // provide appropriate keyboard typing delay before running server intensive operations            
            $(this).typing({
                start: function (event, $elem) {
                },
                stop: function (event, $elem) {
                    FilterGridAllColumns($elem);
                },
                delay: 300
            });

            $(this).keyup(function() {
                if ($(this).val() === '')
                    $("#" + gridID + " .grid-column-overall-quick-filter-reset").hide();
                else
                    $("#" + gridID + " .grid-column-overall-quick-filter-reset").show();
                
                if (_gridAllColumnFilterQuickMouseClickFilter_isActive)
                    GridAllColumnFilterQuickMouseClickFilterSwapPickingMode();
            });
        });
    }

    function FilterGridAllColumns(tb, page) {

        if (typeof(page) == 'undefined')
            page = 1;

        var gridName = tb.parents(".t-widget").first().attr("id");
        LoadingHide();

        var grid = $("#" + gridName).data("tGrid");

        $.ajax({
            type: "POST",
            url: "Filter" + gridName,
            data: {
                filterValue: tb.val(),
                filterColumns: GridGetFilterColumns(grid)
            },
            success: function (result) {
                LoadingHide();
                setTimeout(function() {
                    grid.pageTo(page);
                    $("#" + gridName).trigger('filter_all_columns');
                }, 500);
            }
        });
    }
    
    function GridGetFilterColumns(grid) {
        var columnsFiltered = $.grep(grid.columns, function (column, j) {
            return (column.title != "" && column.hidden !== true);
        });
        var columnMembers = $.map(columnsFiltered,function(column){
            return column.member;
        });
        return columnMembers.join("~");
    }

    // </Grid all column search>


    // <Grid column translation>
    
    function GridColumnTranslationInit(gridName) {
        var grid = $("#" + gridName).data("tGrid");
        //alert(grid);
        $.each(grid.hiddenColumnsOnStartup, function() {
            grid.hideColumn(this);
        });
    }
    
    // </Grid column translation>


    var _insideAutoPostcodeCityMapping = false;

    function AutoPostcodeCityMapping_OnFocus(tbCity, postCodePropertyName, countryPropertyName) {

        if (_insideAutoPostcodeCityMapping)
            return;

        var form = tbCity.closest("form");
        if (countryPropertyName != "") {
            var countryDropdown = $("#" + form.attr("id") + " select[name$='" + countryPropertyName + "'], input[name$='" + countryPropertyName + "']");
            if (countryDropdown.val().toLowerCase() != "de")
                return;
        }
        
        //var plz = $("#" + postCodePropertyName);
        var plz = $("#" + form.attr("id") + " input[name$='" + postCodePropertyName + "']");
        if (plz.val().length != 5)
            return;

        _insideAutoPostcodeCityMapping = true;
        $.ajax({
            type: "POST",
            url: "GetAutoPostcodeCityMappings",
            data: { plz: plz.val() },
            success: function (result) {
                AutoPostcodeCityMapping_InitAutoComplete(tbCity, result.items);
                _insideAutoPostcodeCityMapping = false;
            }
        });
    }

    function AutoPostcodeCityMapping_InitAutoComplete(tb, items) {
        tb.autocomplete({
            minLength: 0,
            source: items
        });
        tb.autocomplete("enable");
        if (tb.val() == "")
            tb.autocomplete("search");
    }
    
    function UserLogout() {
        $.ajax({
            type: "POST",
            url: "/ServicesMvc/DomainCommon/UserLogout",
            data: {  },
            success: function (result) {
                if (result.logoutUrl != "") {
                    location.replace(result.logoutUrl);
                } else {
                    //location.replace('/ServicesMvc/');
                    location.reload();
                }
            }
        });
    }
    
    function UserSwitchCulture(language) {
        $.ajax({
            type: "POST",
            url: "/ServicesMvc/DomainCommon/UserSwitchCulture",
            data: { language: language  },
            success: function (result) {
                location.reload();
            }
        });

        return false;
    }
    
    function ChangePassword() {
        location.replace('/ServicesMvc/Login/ChangePasswordLoggedOn');
    }

    function InitResponsiveControlWidths() {
        
        HandleResponsiveControlWidths();
        
        $('.page-sidebar').on('click', '.sidebar-toggler', function(e) {
            HandleResponsiveControlWidths();
        });
        
        $( window ).resize(function() {
            HandleResponsiveControlWidths();
        });
        
    }    
    
    function HandleResponsiveControlWidths() {
        $(".portlet").each(function () {
            var p = $(this);

            var pWidth = parseInt(p.css("width"), 10);
            var isSmallContainer = (p.parent().hasClass("span8"));

            var maxPageWidth = 900;
            if (isSmallContainer) 
                maxPageWidth = 300;

            p.children().find(".m-wrap,.chzn-container").each(function () {
                
                var e = $(this);
                var eWidth = ((pWidth / 2) - 250);
                
                if ((isSmallContainer || eWidth > 150) && pWidth > maxPageWidth) {

                    if (eWidth < 120)
                        eWidth = 120;
                    if (eWidth > 450)
                        eWidth = 450;
                    
                    if (e.hasClass("chzn-container"))
                        eWidth += 14;
                    if (e.hasClass("hasDatepicker"))
                        eWidth -= 27;
                    if (e.is("select"))
                        eWidth += 14;
                    if (e.is("span"))
                        eWidth += 12;

                    e.css("width", eWidth);
                    
                    e.find(".chzn-drop").css("width", eWidth - 3);
                    return;
                }

                var eWidthReset = "";
                
                if (e.hasClass("chzn-container"))
                    eWidthReset = "220";
                
                e.css("width", eWidthReset);
            });
        });
    }
    
    function FormInitJQueryExtensions() {
        $.extend($.fn, {

            uniformRadioCheck: function () {
                // uniform radio buttons need double click trigger
                $(this).trigger("click");
                $(this).trigger("click");
            },
            
            uniformRadioDisable: function () {
                $(this).attr("disabled", "");
                $(this).closest("div.radio").addClass("disabled");
            },
            
            uniformRadioEnable: function () {
                $(this).removeAttr("disabled");
                $(this).closest("div.radio").removeClass("disabled");
            },
            
            setTooltip: function(tooltipText, placement) {
                if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) 
                    return this;
                
                $(this).attr("data-original-title", tooltipText).attr("data-placement", (placement || "right"));
                $(this).addClass("tooltips");
                return this;
            }
        });
    }
    
    function CheckBoxesEnforceSingleSelection(checkboxes, cbToCheckInitial) {

        if ($.grep(checkboxes, function(elem) { return $(elem).is(":checked"); }).length > 1) {
            $.each(checkboxes, function(i, elem) {
                if (typeof(cbToCheckInitial) !== 'undefined') {
                    if (cbToCheckInitial != elem)
                        $(elem).prop("checked", false);
                } else if (i > 0)
                    $(elem).prop("checked", false);
            });
        }

        $.each(checkboxes, function(i, elem) {
            $(elem).parent().parent().addClass("radio");
        });
        
        checkboxes.on("change", function () {
            var cbClicked = this;
            if (!$(cbClicked).is(':checked')) {
                $(cbClicked).prop("checked", true);
                return;
            }
            $.each(checkboxes, function(i,elem) {
                if (cbClicked != elem)
                    $(elem).prop("checked", false);
            });
        });

//        if (typeof(singleSelectionHint) !== 'undefined') {
//            try { $(checkboxes[0]).closest("label").closest("div").append("<span class='chart-filter-hint'> " + singleSelectionHint + "</span>"); } 
//            catch(e) {}
//        }
    }


    function GetDateFromJson(jsonDate) {
        return eval("new " + jsonDate.slice(1, -1));
    }

    function getAjaxErrorMessage(xhr) {
        if (xhr.responseText == "")
            return "";

        var jsonResponseText = $.parseJSON(xhr.responseText);
        var message = '';
        $.each(jsonResponseText, function(name, val) {
            if (name == "message") {
                message = $.parseJSON(JSON.stringify(val));
            }
        });

        return message;
    }

    Number.prototype.formatNumber = function (decPlaces, thouSeparator, decSeparator) {
        var n = this,
            decPlaces = isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces,
            decSeparator = decSeparator == undefined ? "," : decSeparator,
            thouSeparator = thouSeparator == undefined ? "." : thouSeparator,
            sign = n < 0 ? "-" : "",
            i = parseInt(n = Math.abs(+n || 0).toFixed(decPlaces)) + "",
            j = (j = i.length) > 3 ? j % 3 : 0;
        return sign + (j ? i.substr(0, j) + thouSeparator : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thouSeparator) + (decPlaces ? decSeparator + Math.abs(n - i).toFixed(decPlaces).slice(2) : "");
    };
    
    function showBusy(elem) {
        var opts = {
            lines: 11, // The number of lines to draw
            length: 5, // The length of each line
            width: 2, // The line thickness
            radius: 4, // The radius of the inner circle
            corners: 1, // Corner roundness (0..1)
            rotate: 29, // The rotation offset
            direction: 1, // 1: clockwise, -1: counterclockwise
            color: '#000', // #rgb or #rrggbb or array of colors
            speed: 1.2, // Rounds per second
            trail: 25, // Afterglow percentage
            shadow: false, // Whether to render a shadow
            hwaccel: false, // Whether to use hardware acceleration
            className: 'spinner', // The CSS class to assign to the spinner
            zIndex: 2000000000 // The z-index (defaults to 2000000000)
            ,top: '50%' 
            ,left: '50%'
        };
        elem.spin(opts);
    }

    function hideBusy(elem) {
        elem.spin(false);
    }
    
    function MetronicSidebarEnforceClosed() {
        var sidebarClosed = '@System.Configuration.ConfigurationManager.AppSettings["TestSidebarEnforceClosed"].NotNullOrEmpty().ToLower()' == 'true';
        if (!sidebarClosed)
            return;
        
        var pageContainer = $(".page-container");
        if (pageContainer.hasClass("sidebar-closed"))
            return;

        var sideBarToggler = $(".sidebar-toggler");
        sideBarToggler.trigger("click");
    }
    

    //
    // <Breadcrumbs> //
    //
    
    function GetBreadcrumbs() {
        return $(".breadcrumbs");
    }

    function BreadcrumbsGetLevel(bc) {
        var level = bc.data("level");
        if (typeof(level) === 'undefined') {
            level = 1;
            bc.data("level", level);
        }
        else
            level = parseInt(level);

        return level;
    }

    function BreadcrumbsMoveFirst(levelText) {
        var bc = GetBreadcrumbs();
        var level = 1;
        bc.data("level", level);
        BreadcrumbsDisplay(bc, level, levelText);
    }

    function BreadcrumbsMoveNext(levelText) {
        var bc = GetBreadcrumbs();
        var level = BreadcrumbsGetLevel(bc);
        level++;
        bc.data("level", level);

        //alert("next " + level);
        BreadcrumbsDisplay(bc, level, levelText);
    }

    function BreadcrumbsMovePrev() {
        var bc = GetBreadcrumbs();
        var level = BreadcrumbsGetLevel(bc);
        if (level == 1) return;
        level--;
        bc.data("level", level);
        
        //alert("prev " + level);
        BreadcrumbsDisplay(bc, level, null);
    }

    function BreadcrumbsMoveTo(levelToMove) {
        var bc = GetBreadcrumbs();
        var level = levelToMove;
        bc.data("level", level);
        
        //alert("prev " + level);
        BreadcrumbsDisplay(bc, level, null);
    }
    
    function BreadcrumbsDisplay(bc, level, levelText) {
        bc.find("li").each(function (index, elem) {
            var li = $(elem);
            var a = li.find("a");
            if (level == index + 1) {
                a.addClass("current");
                if (levelText != null) {
                    a.text(levelText);
                    a.attr("onclick", "return false;");
                    a.css("cursor", "default");
                }
            } 
            else
                a.removeClass("current");

            if (index + 1 <= level)
                li.removeClass("hide");
            else
                li.addClass("hide");
        });
    }
    
    //
    // </Breadcrumbs> //
    //
    
    function scrollToTop() {
        if (IsIE())
            setTimeout(function () {
                window.scrollTo(0, 0);
            }, 600);
        else
            setTimeout(function () {
                $("body").animate({ scrollTop: 0 }, '300');
            }, 600);
    }
    
    function LocationReloadWithoutQueryString() {
        window.location = window.location.pathname;
    }

    
</script>
