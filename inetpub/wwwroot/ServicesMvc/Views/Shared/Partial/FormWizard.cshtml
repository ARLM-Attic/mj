@model MvcTools.Models.FormWizardModel 

@if (Model.StepTitlesInNewLine)
{
    <style type="text/css">
        .form-wizard .progress {
            margin-bottom: 0;
        }
        .step .formWizardStepDescWrapper {
            display: block!important;
        }
    </style>
}

<style type="text/css">
    
    .step .formWizardStepDescWrapper {
        display: inline;
    }
    .step .formWizardStepDesc {
        font-size: 14px!important;
        margin-bottom: 2px;
    }
    .active .step .formWizardStepDesc {
        font-weight: bold;
    }
    
	.form-wizard .step .formWizardStepDesc {
	    display: inline-block;
	}

    .row-fluid .formWizardStepSpanGeneral {
        display: block;
    }
    
    .new-line {
        padding-top: 5px!important;     
    }
    
    
    .row-fluid .formWizardStepSpan11 {
      width: 9.14680851063829%;
      *width: 9.19361702127659%;
    }
    .row-fluid .formWizardStepSpan10 {
      width: 9.84680851063829%;
      *width: 9.89361702127659%;
    }
    .row-fluid .formWizardStepSpan9 {
      width: 11.04680851063829%;
      *width: 11.09361702127659%;
    }
    .row-fluid .formWizardStepSpan8 {
      width: 12.24680851063829%;
      *width: 12.19361702127659%;
    }
    .row-fluid .formWizardStepSpan7 {
      width: 14.24680851063829%;
      *width: 14.19361702127659%;
    }
    .row-fluid .formWizardStepSpan6 {
      width: 16.53617021276595%;
      *width: 16.48297872340425%;
    }
    .row-fluid .formWizardStepSpan5 {
      width: 19.404255319148934%;
      *width: 19.351063829787233%;
    }
    .row-fluid .formWizardStepSpan4 {
      width: 23.404255319148934%;
      *width: 23.351063829787233%;
    }
    .row-fluid .formWizardStepSpan3 {
      width: 32.914893617021278%;
      *width: 32.861702127659576%;
    }
    .row-fluid .formWizardStepSpan2 {
      width: 48.93617021276595%;
      *width: 48.88297872340425%;
    }
</style>

<script type="text/javascript">
    
    function ShoppingCartTryHide() {
        try { ShoppingCartHide(); }
        catch (e) { }
    }

    var FormWizard = function () {

        return {
            //
            // <PUBLICS>
            //

            //main function to intantiate the module
            Init: function (onInit) {

                if (!jQuery().bootstrapWizard)
                    return;

                FormWizard.onInitPrivate = onInit;

                this.formWizardInitTabs();

                // default form wizard
                $('#formWizard').bootstrapWizard    ({
                    'nextSelector': '.button-next',
                    'previousSelector': '.button-prev',
                    onTabClick: function (tab, navigation, index, clickedIndex) {
                        //alert('on tab click disabled');
                        var total = navigation.find('li').length;
                        if (index == (total - 1))
                            return false;

                        var tabClickValid = FormWizard.tabClickForwardEnforceValid || (!FormWizard.tabClickDisabled && (index > clickedIndex));
                        //alert(FormWizard.tabClickDisabled + " - (" + tabClickValid + ")");
                        if (tabClickValid)
                            FormWizard.formWizardNavButtonsShowHide(clickedIndex + 1, total);
                        return tabClickValid;
                    },
                    onNext: function (tab, navigation, index) {
                        ShoppingCartTryHide();
                        var current = index + 1;
                        var total = navigation.find('li').length;

                        FormWizard.formWizardNavButtonsShowHide(current, total);

                        var buttonType = 'next';
                        //alert(FormWizard.buttonOnClickPrivate[buttonType]);
                        if (FormWizard.buttonOnClickPrivate[buttonType] != null && !FormWizard.buttonHandlersDisabled)
                            if (!FormWizard.buttonOnClickPrivate[buttonType](current, total)) {
                                FormWizard.formWizardNavButtonsShowHide(current - 1, total);
                                return false;
                            }

                        // set wizard title
                        $('.step-title', $('#formWizard')).text('Schritt ' + (index + 1) + ' / ' + total);
                        // set done steps
                        jQuery('li', $('#formWizard')).removeClass("done");
                        var liList = navigation.find('li');
                        for (var i = 0; i < index; i++) {
                            jQuery(liList[i]).addClass("done");
                        }

                        return true;
                    },
                    onPrevious: function (tab, navigation, index) {
                        ShoppingCartTryHide();
                        var current = index + 1;
                        var total = navigation.find('li').length;

                        FormWizard.formWizardNavButtonsShowHide(current, total);

                        var buttonType = 'prev';
                        if (FormWizard.buttonOnClickPrivate[buttonType] != null && !FormWizard.buttonHandlersDisabled)
                            if (!FormWizard.buttonOnClickPrivate[buttonType](current, total)) {
                                FormWizard.formWizardNavButtonsShowHide(current + 1, total);
                                return false;
                            }

                        // set wizard title
                        $('.step-title', $('#formWizard')).text('Schritt ' + (index + 1) + ' / ' + total);
                        // set done steps
                        jQuery('li', $('#formWizard')).removeClass("done");
                        var liList = navigation.find('li');
                        for (var i = 0; i < index; i++) {
                            jQuery(liList[i]).addClass("done");
                        }

                        return true;
                    },
                    onTabShow: function (tab, navigation, index) {
                        var current = index + 1;
                        var total = navigation.find('li').length;

                        var $percent = (current / total) * 95;
                        if (current / total == 1)
                            $percent = 100;
                        $('#formWizard').find('.bar').css({
                            width: $percent + '%'
                        });

                        // MJE 2014: fix for multiple models of same type:
                        FormWizard.replaceTabHtmlFormIds(current);
                    }
                });

                //alert(FormWizard.currentIndex());
                if (FormWizard.onInitPrivate != null)
                    FormWizard.onInitPrivate();

                //$('#formWizard').find('.form-actions').hide();
                $('#formWizard').find('.button-prev').hide();

                $('#formWizard .button-submit').click(function () {
                    ShoppingCartTryHide();
                    var buttonType = 'submit';
                    if (FormWizard.buttonOnClickPrivate[buttonType] != null && !FormWizard.buttonHandlersDisabled)
                        if (!FormWizard.buttonOnClickPrivate[buttonType]())
                            return false;
                    return true;
                }).hide();

                $('#formWizard .button-custom1').click(function () {
                    ShoppingCartTryHide();
                    var buttonType = 'custom1';
                    if (FormWizard.buttonOnClickPrivate[buttonType] != null && !FormWizard.buttonHandlersDisabled)
                        if (!FormWizard.buttonOnClickPrivate[buttonType]())
                            return false;
                    return true;
                }).hide();

                $('#formWizard .button-restart').click(function () {
                    ShoppingCartTryHide();
                    var buttonType = 'restart';
                    if (FormWizard.buttonOnClickPrivate[buttonType] != null && !FormWizard.buttonHandlersDisabled)
                        if (!FormWizard.buttonOnClickPrivate[buttonType]())
                            return false;
                    return true;
                }).hide();

                $('#formWizard').removeClass("hide");
            },

            ActionsShow: function (show) {
                var actions = $('#formWizard').find('.form-actions');
                if (actions != null)
                    if (show) actions.show(); else actions.hide();
            },

            ActionsDisable: function () {
                FormWizard.actionsDisabled = true;
                FormWizard.ActionsShow(false);
            },

            SetTabHtml: function (tabNumberOrName, html) {
                if (!$.isNumeric(tabNumberOrName)) {
                    tabNumberOrName = this.GetStepIndex(tabNumberOrName) + 1;
                }

                $('#formWizardPrivateTab' + tabNumberOrName).html(html);
            },

            SetNextTabHtmlAndMoveNext: function (html) {
                var tabNumber = this.GetNextTabIndex();
                
                this.SetTabHtml(tabNumber, html);
                try { FormPreparePrivateAjax(tabNumber-1); } catch (e) {}
                this.ButtonNextInvoke();
            },

            SetSummaryTabHtmlAndMoveToSummary: function (html) {
                var tabNumber = ($('#formWizard').data('bootstrapWizard')).navigationLength();
                //console.log("* " + tabNumber + " *");
                
                this.SetTabHtml(tabNumber, html);
                try { FormPreparePrivateAjax(tabNumber-1); } catch (e) {}

                var that = this;
                that.tabClickForwardEnforceValid = true;
                $("#formWizardStep_" + (tabNumber)).find("a").trigger("click");
                setTimeout(function() { that.tabClickForwardEnforceValid = false; }, 500);
            },

            GetNextTabKey: function () {
                return this.GetStepKey(this.GetNextTabIndex());
            },

            GetNextTabIndex: function () {
                return this.getCurrentIndex() + 2;
            },

            GetCurrentTabIndex: function () {
                return this.getCurrentIndex() + 1;
            },


            getCurrentIndex : function() {
                return ($('#formWizard').data('bootstrapWizard')).currentIndex();
            },

            ButtonNextShow: function (show) {
                this.buttonShow('next', show);
            },

            ButtonPrevShow: function (show) {
                this.buttonShow('prev', show);
            },
            
            ButtonPrevShowDelayed : function(){
                setTimeout('FormWizard.ButtonPrevShow(true)', 500);            
            },

            ButtonSubmitShow: function (show) {
                this.buttonShow('submit', show);
            },

            ButtonCustom1Show: function (show, buttonText) {
                if (typeof (buttonText) !== 'undefined')
                    $(".button-custom1 span").html(buttonText);
                
                this.buttonShow('custom1', show);
            },

            ButtonRestartShow: function (show) {
                this.buttonShow('restart', show);
            },


            ButtonNextInvoke: function () {
                this.buttonInvoke('next');
            },

            ButtonPrevInvoke: function () {
                this.buttonInvoke('prev');
            },

            ButtonSubmitInvoke: function () {
                this.buttonInvoke('submit');
            },

            ButtonCustom1Invoke: function () {
                this.buttonInvoke('custom1');
            },

            ButtonRestartInvoke: function () {
                this.buttonInvoke('restart');
            },


            OnNext: function (func) {
                this.setButtonOnClick('next', func);
            },

            OnPrev: function (func) {
                this.setButtonOnClick('prev', func);
            },

            OnSubmit: function (func) {
                this.setButtonOnClick('submit', func);
            },

            OnCustom1: function (func) {
                this.setButtonOnClick('custom1', func);
            },

            OnRestart: function (func) {
                this.setButtonOnClick('restart', func);
            },

            InsertActionButton: function (customActionContainerId) {
                //alert($(customActionContainerId).attr('id'));
                $(customActionContainerId).children().prependTo($('#formWizard').find('.form-actions'));
            },
            
            GetStepKey: function(index) {
                if (index <= 0 || index > this.stepKeys.length)
                    return '';
                
                return this.stepKeys[index - 1];
            },
            
            GetStepIndex: function(key) {
                for (var i=0; i<this.stepKeys.length; i++)
                    if (this.stepKeys[i] == key)
                        return i;
                
                return -1;
            },
            
            HasStepKey: function(key) {
                return (this.GetStepIndex(key) != -1);
            },
            
            RenameNextStepAndHideLastSteps: function(nextStepNewName) {
                var nextTabIndex = this.GetNextTabIndex();
                $("#formWizardStep_" + nextTabIndex + " .formWizardStepDesc").html(nextStepNewName);
                for (var i = nextTabIndex + 1; i <= this.stepKeys.length; i++) {
                    $("#formWizardStep_" + i).hide();
                }
            },
            
            RestoreAllSteps: function() {
                for (var i = 1; i <= this.stepKeys.length; i++) {
                    var stepTitleSpan = $("#formWizardStep_" + i + " .formWizardStepDesc");
                    stepTitleSpan.html(stepTitleSpan.attr("data"));
                    
                    $("#formWizardStep_" + i).show();
                }
            },

            //
            // </PUBLICS>
            //


            //
            // <privates>
            //
            
            replaceTabHtmlFormIds: function(tabIndexToActivate) {
                // MJE 2014: fix for multiple models of same type:
                for (var i=0; i<this.stepKeys.length; i++) {
                    this.replaceOneTabHtmlFormIds(i, i == tabIndexToActivate);
                }
            },
            
            replaceOneTabHtmlFormIds: function(tabIndex, activate) {
                var namedIndex = tabIndex + 1;
                var tabDivID = "formWizardPrivateTab" + tabIndex;
                var tabDiv = $("#" + tabDivID);

                var form = tabDiv.find('form');
                if (typeof(form.attr('id')) !== 'undefined')
                    ChangeIdsForForm(form, activate);
            },

            stepKeys: [ @Model.StepKeysAsJavascript ],
                
                tabClickForwardEnforceValid : false,

            tabClickDisabled : false,

            buttonHandlersDisabled: false,

            onInitPrivate: null,

            actionsDisabled: false,

            buttonShow: function (buttonType, show) {
                var button = $('#formWizard').find('.button-' + buttonType);
                if (button != null)
                    if (show) button.show(); else button.hide();
            },

            buttonVisible: function (buttonType) {
                var button = $('#formWizard').find('.button-' + buttonType);
                if (button != null)
                    return (button.css("display") != "none");
            },

            buttonInvoke: function (buttonType) {
                var button = $('#formWizard').find('.button-' + buttonType);
                if (button != null)
                    if (!this.buttonHandlersDisabled) {
                        this.buttonHandlersDisabled = true;
                        button.trigger("click");
                        this.buttonHandlersDisabled = false;
                    }
            },

            buttonOnClickPrivate: new Array(),

            setButtonOnClick: function (buttonType, func) {
                var button = $('#formWizard').find('.button-' + buttonType);
                if (button != null)
                    this.buttonOnClickPrivate[buttonType] = func;
            },

            formWizardInitTabs: function () {
                for (var i = 1; i <= 25; i++) {

                    var srcDiv = document.getElementById('formWizardTab' + i);
                    var dstDiv = document.getElementById('formWizardPrivateTab' + i);

                    if (srcDiv != null && dstDiv != null) {
                        var o = srcDiv.parentNode.removeChild(srcDiv);
                        $(o).removeClass('hide');
                        dstDiv.appendChild(o);
                    }
                }
            },

            formWizardNavButtonsShowHide: function (current, total) {

                if (FormWizard.actionsDisabled)
                    return;

                $('#formWizard').find('.form-actions').show();

                if (current == 1) {
                    //$('#formWizard').find('.form-actions').hide();
                    $('#formWizard').find('.button-restart').hide();
                    $('#formWizard').find('.button-submit').hide();
                    $('#formWizard').find('.button-prev').hide();
                    $('#formWizard').find('.button-next').show();
                } else
                    if (current == total) {
                    $('#formWizard').find('.button-prev').hide();
                    $('#formWizard').find('.button-next').hide();
                    $('#formWizard').find('.button-submit').hide();
                    $('#formWizard').find('.button-restart').show();
                } else
                        if (current == total - 1) {
                    $('#formWizard').find('.button-prev').show();
                    $('#formWizard').find('.button-next').hide();
                    $('#formWizard').find('.button-submit').show();
                    $('#formWizard').find('.button-restart').hide();
                } else {
                    $('#formWizard').find('.button-prev').show();
                    $('#formWizard').find('.button-next').show();
                    $('#formWizard').find('.button-submit').hide();
                    $('#formWizard').find('.button-restart').hide();
                }
            }

            //
            // </privates>
            //
        };

    } ();

    function ChangeIdsForForm(form, activateIds) {
        var hidePostfix = "_XhiddenX";

        if (!form.attr('id'))
            return false;

        form.find("*[id]").each(function () {

            if (activateIds) {
                $(this).attr("id", $(this).attr("id").replace(hidePostfix, ""));
                if ($(this).attr("name"))
                    $(this).attr("name", $(this).attr("name").replace(hidePostfix, ""));
            }
            else {
                if ($(this).attr("id").indexOf(hidePostfix) <= 0) {
                    $(this).attr("id", $(this).attr("id") + hidePostfix);
                    if ($(this).attr("name"))
                        $(this).attr("name", $(this).attr("name") + hidePostfix);
                }
            }
            
        });

        return true;
    }

</script>


<div class="row-fluid">
    <div class="span12">
        <div class="grey hide" id="formWizard">
            <div class="portlet-title">
                <div class="caption">
                    <i class="@Model.HeaderIconCssClass"></i> @Model.Header <span class="step-title">Schritt 1 / @Model.StepCount</span>
                </div>
                <div class="tools hidden-phone">
                </div>
            </div>
            <div class="portlet-body form">
                <div class="form-horizontal">
                    <div class="form-wizard">
                        <div class="navbar steps">
                            <div class="navbar-inner">
                                <ul class="row-fluid">
                                    @for (var i = 0; i < Model.StepCount; i++)
                                    {
                                        <li class="@Model.GetStepSpanCssClass()" id="formWizardStep_@Model.GetStepNo(i)">
                                            <a href="@Model.GetTabHref(i)" data-toggle="tab" class="@Model.GetStepTitleCssClass(i)">
                                                <span class="number">@Model.GetStepNo(i)</span>
                                                <span class="formWizardStepDescWrapper new-line">
                                                    @if (!Model.StepTitlesInNewLine)
                                                    {
                                                        <i class="icon-ok"></i>
                                                    }
                                                    <span data="@Model.GetStepTitle(i)" class="formWizardStepDesc">@Model.GetStepTitle(i)</span>   
                                                    @if (Model.StepTitlesInNewLine)
                                                    {
                                                        <i class="icon-ok"></i>
                                                    }
                                                </span>
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                        <div id="bar" class="progress progress-success progress-striped">
                            <div class="bar"></div>
                        </div>

                        <div class="tab-content">
                            @for (var i = 0; i < Model.StepCount; i++)
                            {
                                <div class="@Model.GetStepTabCssClass(i)" id="@Model.GetTabID(i)"></div>
                            }
                        </div>

                        <div class="form-actions clearfix">
                            <a href="javascript:;" class="btn button-prev">
                                <i class="m-icon-swapleft"></i> Zurück 
                            </a>
                            <a href="javascript:;" class="btn green button-next">
                                <span>Weiter</span> <i class="m-icon-swapright m-icon-white"></i>
                            </a>
                            <a href="javascript:;" class="btn green button-submit">
                                Absenden <i class="m-icon-swapright m-icon-white"></i>
                            </a>
                            <a href="javascript:;" class="btn blue margin-left-10 button-custom1">
                                <span>Custom 1</span> <i class="m-icon-swapright m-icon-white"></i>
                            </a>
                            <a href="javascript:;" class="btn green button-restart">
                                Neuen Vorgang beginnen <i class="m-icon-swapright m-icon-white"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
