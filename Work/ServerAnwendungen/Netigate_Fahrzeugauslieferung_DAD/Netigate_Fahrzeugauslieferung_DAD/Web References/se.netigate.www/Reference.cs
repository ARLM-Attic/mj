//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.17929
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Der Quellcode wurde automatisch mit Microsoft.VSDesigner generiert. Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace Netigate_Fahrzeugauslieferung_DAD.se.netigate.www {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NetigateAPISoap", Namespace="http://tempuri.org/")]
    public partial class NetigateAPI : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAnsweredRespondentListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSurveyListByCustomerIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRespondentToSurveyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnswersFromRespondentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFullAnswersFromRespondentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFullAnsweredRespondentListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFullAnsweredRespondentListByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSurveyQuestionsBySurveyIdOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NetigateAPI() {
            this.Url = global::Netigate_Fahrzeugauslieferung_DAD.Properties.Settings.Default.Netigate_Fahrzeugauslieferung_DAD_se_netigate_www_NetigateAPI;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAnsweredRespondentListCompletedEventHandler GetAnsweredRespondentListCompleted;
        
        /// <remarks/>
        public event GetSurveyListByCustomerIdCompletedEventHandler GetSurveyListByCustomerIdCompleted;
        
        /// <remarks/>
        public event AddRespondentToSurveyCompletedEventHandler AddRespondentToSurveyCompleted;
        
        /// <remarks/>
        public event GetAnswersFromRespondentCompletedEventHandler GetAnswersFromRespondentCompleted;
        
        /// <remarks/>
        public event GetFullAnswersFromRespondentCompletedEventHandler GetFullAnswersFromRespondentCompleted;
        
        /// <remarks/>
        public event GetFullAnsweredRespondentListCompletedEventHandler GetFullAnsweredRespondentListCompleted;
        
        /// <remarks/>
        public event GetFullAnsweredRespondentListByDateCompletedEventHandler GetFullAnsweredRespondentListByDateCompleted;
        
        /// <remarks/>
        public event GetSurveyQuestionsBySurveyIdCompletedEventHandler GetSurveyQuestionsBySurveyIdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAnsweredRespondentList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAnsweredRespondentList(int intSurveyId, string strGUID) {
            object[] results = this.Invoke("GetAnsweredRespondentList", new object[] {
                        intSurveyId,
                        strGUID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAnsweredRespondentListAsync(int intSurveyId, string strGUID) {
            this.GetAnsweredRespondentListAsync(intSurveyId, strGUID, null);
        }
        
        /// <remarks/>
        public void GetAnsweredRespondentListAsync(int intSurveyId, string strGUID, object userState) {
            if ((this.GetAnsweredRespondentListOperationCompleted == null)) {
                this.GetAnsweredRespondentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnsweredRespondentListOperationCompleted);
            }
            this.InvokeAsync("GetAnsweredRespondentList", new object[] {
                        intSurveyId,
                        strGUID}, this.GetAnsweredRespondentListOperationCompleted, userState);
        }
        
        private void OnGetAnsweredRespondentListOperationCompleted(object arg) {
            if ((this.GetAnsweredRespondentListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnsweredRespondentListCompleted(this, new GetAnsweredRespondentListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSurveyListByCustomerId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetSurveyListByCustomerId(int intCustomerId, string strGUID) {
            object[] results = this.Invoke("GetSurveyListByCustomerId", new object[] {
                        intCustomerId,
                        strGUID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetSurveyListByCustomerIdAsync(int intCustomerId, string strGUID) {
            this.GetSurveyListByCustomerIdAsync(intCustomerId, strGUID, null);
        }
        
        /// <remarks/>
        public void GetSurveyListByCustomerIdAsync(int intCustomerId, string strGUID, object userState) {
            if ((this.GetSurveyListByCustomerIdOperationCompleted == null)) {
                this.GetSurveyListByCustomerIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSurveyListByCustomerIdOperationCompleted);
            }
            this.InvokeAsync("GetSurveyListByCustomerId", new object[] {
                        intCustomerId,
                        strGUID}, this.GetSurveyListByCustomerIdOperationCompleted, userState);
        }
        
        private void OnGetSurveyListByCustomerIdOperationCompleted(object arg) {
            if ((this.GetSurveyListByCustomerIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSurveyListByCustomerIdCompleted(this, new GetSurveyListByCustomerIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddRespondentToSurvey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddRespondentToSurvey(string strRespondentDetails, int intSurveyId, string strGUID) {
            object[] results = this.Invoke("AddRespondentToSurvey", new object[] {
                        strRespondentDetails,
                        intSurveyId,
                        strGUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddRespondentToSurveyAsync(string strRespondentDetails, int intSurveyId, string strGUID) {
            this.AddRespondentToSurveyAsync(strRespondentDetails, intSurveyId, strGUID, null);
        }
        
        /// <remarks/>
        public void AddRespondentToSurveyAsync(string strRespondentDetails, int intSurveyId, string strGUID, object userState) {
            if ((this.AddRespondentToSurveyOperationCompleted == null)) {
                this.AddRespondentToSurveyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRespondentToSurveyOperationCompleted);
            }
            this.InvokeAsync("AddRespondentToSurvey", new object[] {
                        strRespondentDetails,
                        intSurveyId,
                        strGUID}, this.AddRespondentToSurveyOperationCompleted, userState);
        }
        
        private void OnAddRespondentToSurveyOperationCompleted(object arg) {
            if ((this.AddRespondentToSurveyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRespondentToSurveyCompleted(this, new AddRespondentToSurveyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAnswersFromRespondent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAnswersFromRespondent(string strAnswerSetId, int intSurveyId, string strGUID) {
            object[] results = this.Invoke("GetAnswersFromRespondent", new object[] {
                        strAnswerSetId,
                        intSurveyId,
                        strGUID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAnswersFromRespondentAsync(string strAnswerSetId, int intSurveyId, string strGUID) {
            this.GetAnswersFromRespondentAsync(strAnswerSetId, intSurveyId, strGUID, null);
        }
        
        /// <remarks/>
        public void GetAnswersFromRespondentAsync(string strAnswerSetId, int intSurveyId, string strGUID, object userState) {
            if ((this.GetAnswersFromRespondentOperationCompleted == null)) {
                this.GetAnswersFromRespondentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnswersFromRespondentOperationCompleted);
            }
            this.InvokeAsync("GetAnswersFromRespondent", new object[] {
                        strAnswerSetId,
                        intSurveyId,
                        strGUID}, this.GetAnswersFromRespondentOperationCompleted, userState);
        }
        
        private void OnGetAnswersFromRespondentOperationCompleted(object arg) {
            if ((this.GetAnswersFromRespondentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnswersFromRespondentCompleted(this, new GetAnswersFromRespondentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFullAnswersFromRespondent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetFullAnswersFromRespondent(string strAnswerSetId, int intSurveyId, string strGUID) {
            object[] results = this.Invoke("GetFullAnswersFromRespondent", new object[] {
                        strAnswerSetId,
                        intSurveyId,
                        strGUID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetFullAnswersFromRespondentAsync(string strAnswerSetId, int intSurveyId, string strGUID) {
            this.GetFullAnswersFromRespondentAsync(strAnswerSetId, intSurveyId, strGUID, null);
        }
        
        /// <remarks/>
        public void GetFullAnswersFromRespondentAsync(string strAnswerSetId, int intSurveyId, string strGUID, object userState) {
            if ((this.GetFullAnswersFromRespondentOperationCompleted == null)) {
                this.GetFullAnswersFromRespondentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFullAnswersFromRespondentOperationCompleted);
            }
            this.InvokeAsync("GetFullAnswersFromRespondent", new object[] {
                        strAnswerSetId,
                        intSurveyId,
                        strGUID}, this.GetFullAnswersFromRespondentOperationCompleted, userState);
        }
        
        private void OnGetFullAnswersFromRespondentOperationCompleted(object arg) {
            if ((this.GetFullAnswersFromRespondentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFullAnswersFromRespondentCompleted(this, new GetFullAnswersFromRespondentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFullAnsweredRespondentList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetFullAnsweredRespondentList(int intSurveyId, string strGUID) {
            object[] results = this.Invoke("GetFullAnsweredRespondentList", new object[] {
                        intSurveyId,
                        strGUID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetFullAnsweredRespondentListAsync(int intSurveyId, string strGUID) {
            this.GetFullAnsweredRespondentListAsync(intSurveyId, strGUID, null);
        }
        
        /// <remarks/>
        public void GetFullAnsweredRespondentListAsync(int intSurveyId, string strGUID, object userState) {
            if ((this.GetFullAnsweredRespondentListOperationCompleted == null)) {
                this.GetFullAnsweredRespondentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFullAnsweredRespondentListOperationCompleted);
            }
            this.InvokeAsync("GetFullAnsweredRespondentList", new object[] {
                        intSurveyId,
                        strGUID}, this.GetFullAnsweredRespondentListOperationCompleted, userState);
        }
        
        private void OnGetFullAnsweredRespondentListOperationCompleted(object arg) {
            if ((this.GetFullAnsweredRespondentListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFullAnsweredRespondentListCompleted(this, new GetFullAnsweredRespondentListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFullAnsweredRespondentListByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetFullAnsweredRespondentListByDate(string strDate, int intSurveyId, string strGUID) {
            object[] results = this.Invoke("GetFullAnsweredRespondentListByDate", new object[] {
                        strDate,
                        intSurveyId,
                        strGUID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetFullAnsweredRespondentListByDateAsync(string strDate, int intSurveyId, string strGUID) {
            this.GetFullAnsweredRespondentListByDateAsync(strDate, intSurveyId, strGUID, null);
        }
        
        /// <remarks/>
        public void GetFullAnsweredRespondentListByDateAsync(string strDate, int intSurveyId, string strGUID, object userState) {
            if ((this.GetFullAnsweredRespondentListByDateOperationCompleted == null)) {
                this.GetFullAnsweredRespondentListByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFullAnsweredRespondentListByDateOperationCompleted);
            }
            this.InvokeAsync("GetFullAnsweredRespondentListByDate", new object[] {
                        strDate,
                        intSurveyId,
                        strGUID}, this.GetFullAnsweredRespondentListByDateOperationCompleted, userState);
        }
        
        private void OnGetFullAnsweredRespondentListByDateOperationCompleted(object arg) {
            if ((this.GetFullAnsweredRespondentListByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFullAnsweredRespondentListByDateCompleted(this, new GetFullAnsweredRespondentListByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSurveyQuestionsBySurveyId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetSurveyQuestionsBySurveyId(int intSurveyId, string strGUID) {
            object[] results = this.Invoke("GetSurveyQuestionsBySurveyId", new object[] {
                        intSurveyId,
                        strGUID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetSurveyQuestionsBySurveyIdAsync(int intSurveyId, string strGUID) {
            this.GetSurveyQuestionsBySurveyIdAsync(intSurveyId, strGUID, null);
        }
        
        /// <remarks/>
        public void GetSurveyQuestionsBySurveyIdAsync(int intSurveyId, string strGUID, object userState) {
            if ((this.GetSurveyQuestionsBySurveyIdOperationCompleted == null)) {
                this.GetSurveyQuestionsBySurveyIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSurveyQuestionsBySurveyIdOperationCompleted);
            }
            this.InvokeAsync("GetSurveyQuestionsBySurveyId", new object[] {
                        intSurveyId,
                        strGUID}, this.GetSurveyQuestionsBySurveyIdOperationCompleted, userState);
        }
        
        private void OnGetSurveyQuestionsBySurveyIdOperationCompleted(object arg) {
            if ((this.GetSurveyQuestionsBySurveyIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSurveyQuestionsBySurveyIdCompleted(this, new GetSurveyQuestionsBySurveyIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAnsweredRespondentListCompletedEventHandler(object sender, GetAnsweredRespondentListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnsweredRespondentListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnsweredRespondentListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSurveyListByCustomerIdCompletedEventHandler(object sender, GetSurveyListByCustomerIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSurveyListByCustomerIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSurveyListByCustomerIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddRespondentToSurveyCompletedEventHandler(object sender, AddRespondentToSurveyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRespondentToSurveyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRespondentToSurveyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAnswersFromRespondentCompletedEventHandler(object sender, GetAnswersFromRespondentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnswersFromRespondentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnswersFromRespondentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFullAnswersFromRespondentCompletedEventHandler(object sender, GetFullAnswersFromRespondentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFullAnswersFromRespondentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFullAnswersFromRespondentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFullAnsweredRespondentListCompletedEventHandler(object sender, GetFullAnsweredRespondentListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFullAnsweredRespondentListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFullAnsweredRespondentListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFullAnsweredRespondentListByDateCompletedEventHandler(object sender, GetFullAnsweredRespondentListByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFullAnsweredRespondentListByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFullAnsweredRespondentListByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSurveyQuestionsBySurveyIdCompletedEventHandler(object sender, GetSurveyQuestionsBySurveyIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSurveyQuestionsBySurveyIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSurveyQuestionsBySurveyIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591