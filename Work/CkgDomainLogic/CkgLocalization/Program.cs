using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Resources;
using System.Text;

namespace CkgLocalization
{
    class Program
    {
        static void Main()
        {
            var rootPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);

            //
            // 1. obtain all localiziation properties:
            //
            var resFileName = rootPath + @"\..\Resources\DomainCommonResources.de-DE.resx";
            Stream stream = new FileStream(resFileName, FileMode.Open, FileAccess.Read, FileShare.Read);
            var rrX = new ResXResourceReader(stream);
            IDictionaryEnumerator rrEn;
            rrEn = rrX.GetEnumerator();
            var slist = new Dictionary<string, string>();
            while (rrEn.MoveNext())
            {
                slist.Add(rrEn.Key.ToString(), rrEn.Value.ToString());
            }
            rrX.Close();
            stream.Dispose();
            var codePropertyLines = slist.SelectMany(property => new List<string>
                {
                    "",
                    "\t\t/// <summary>",
                    string.Format("\t\t/// {0}", property.Value),
                    "\t\t/// </summary>",
                    string.Format("\t\tpublic static string {0} {{ get {{ return Translate(\"{0}\"); }} }}", property.Key)
                });


            //
            // 2. write c# source code class
            //
            var outputFileName = rootPath + @"\..\General\Services\Localization\AutoGenerated\Localize.cs";
            if (File.Exists(outputFileName))
                File.SetAttributes(outputFileName, FileAttributes.Normal);
            var codeLinesStart = new List<string>
                {
                    "namespace CkgDomainLogic.General.Services",
                    "{",
                    "\t/// ",
                    "\t/// Auto generated class by a tool of Matthias Jenzen",
                    "\t/// ",
                    "\tpublic partial class Localize",
                    "\t{",
                    "\t\t// ReSharper disable InconsistentNaming",
                };
            var codeLinesEnd = new List<string>
                {
                    "\t\t// ReSharper restore InconsistentNaming",
                    "\t}",
                    "}",
                };

            File.WriteAllLines(outputFileName, codeLinesStart.Concat(codePropertyLines).Concat(codeLinesEnd), Encoding.UTF8);
        }
    }
}
