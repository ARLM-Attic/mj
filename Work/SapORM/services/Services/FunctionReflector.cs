using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Reflection;
using GeneralTools.Models;
using GeneralTools.Services;
using SapORM.Contracts;

namespace SapORM.Services
{
    public class FunctionReflector
    {
        public string SapFunction { get; private set; }

        public static ISapDataService DataService { get; set; }

        static ISapConnection SapConnection { get { return DataService.SapConnection; } }

        static IDynSapProxyFactory DynFactory { get { return DataService.DynSapProxyFactory; } }


        public FunctionReflector(string sapFunction)
        {
            SapFunction = sapFunction;
        }

        static void ExportAllModelsToExcel(string sourcePath)
        {
            var destinationPath = @"\\AHS018\Abteilung\IT\IT-Entwicklung\SAP";
            var destinationFile = Path.Combine(destinationPath, "SAP-Bapis.csv");
            if (!FileService.TryFileDelete(destinationFile))
                return;

            var sw = FileHelper.CreateTextFile(destinationFile);
            Directory.GetFiles(sourcePath, "*.cs").Select(s => Path.GetFileName(s).Replace(".cs", "")).OrderBy(s => s).ToList().ForEach(sw.WriteLine);
            sw.Close();
        }

        public void WriteOrmForExportTableStructures(string inputParameterKeys = null, params object[] inputParameterValues)
        {
            var sapProxy = DynFactory.CreateProxyCache(SapFunction, SapConnection, DynFactory).GetProxy();

            if (!string.IsNullOrEmpty(inputParameterKeys))
            {
                var inputParameterKeyArray = inputParameterKeys.Split(',').ToArray();
                for (var i = 0; i < inputParameterKeyArray.Length; i++)
                    sapProxy.SetImportParameter(inputParameterKeyArray[i].Trim(), 
                        (inputParameterValues[i] is byte[] ? inputParameterValues[i] : inputParameterValues[i].ToString()));
            }

            sapProxy.CallBapi(null, null, true);

            var tables = new List<DataTable>();
            var exportTables = sapProxy.GetExportTables();
            if (exportTables != null && exportTables.Any())
                tables = tables.Concat(exportTables).ToList();

            // Import-Strukturen
            var importTables = sapProxy.GetImportTables();
            if (importTables != null && importTables.Any())
            {
                foreach (var item in importTables)
                {
                    var impTable = item;

                    if (tables.None(t => t.TableName == impTable.TableName))
                        tables.Add(impTable);
                }
            }

            var exportPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + @"\..\..\..\models\Models\SAP\AutoGenerated";
            var exportFileName = Path.Combine(exportPath, SapFunction + ".cs");
            var sw = FileHelper.CreateTextFile(exportFileName);
            if (sw == null) return;

            sw.WriteLine("using System;");
            sw.WriteLine("using System.Collections.Generic;");
            sw.WriteLine("using System.Data;");
            sw.WriteLine("using System.Linq;");
            sw.WriteLine("using System.Web.Script.Serialization;");
            sw.WriteLine("using GeneralTools.Contracts;");
            sw.WriteLine("using GeneralTools.Models;");
            sw.WriteLine("using SapORM.Contracts;");
            sw.WriteLine("");

            sw.WriteLine("namespace SapORM.Models");
            sw.WriteLine("{");
            sw.WriteLine("\tpublic partial class {0}", SapFunction);
            sw.WriteLine("\t{");

            sw.WriteLine("\t\tpublic static void Init(ISapDataService sap)");
            sw.WriteLine("\t\t{");
            sw.WriteLine("\t\t\tsap.Init(typeof({0}).Name);", SapFunction);
            sw.WriteLine("\t\t}");
            sw.WriteLine("");

            sw.WriteLine("\t\tpublic static void Init(ISapDataService sap, string inputParameterKeys, params object[] inputParameterValues)");
            sw.WriteLine("\t\t{");
            sw.WriteLine("\t\t\tsap.Init(typeof({0}).Name, inputParameterKeys, inputParameterValues);", SapFunction);
            sw.WriteLine("\t\t}");

            foreach (var table in tables)
            {
                WriteOrmForExportTableStructure(sw, table);
            }
            sw.WriteLine("\t}");

            sw.WriteLine("");
            sw.WriteLine("\tpublic static partial class DataTableExtensions");
            sw.WriteLine("\t{");
            foreach (var table in tables)
            {
                WriteOrmForExportExtensionMethods(sw, table);
            }
            sw.WriteLine("\t}");

            sw.WriteLine("}");
            sw.Close();

            ExportAllModelsToExcel(exportPath);
        }
        
        public void WriteOrmForExportTableStructure(StreamWriter sw, DataTable tbl)
        {
            sw.WriteLine();
            sw.WriteLine("\t\tpublic partial class {0} : IModelMappingApplied", tbl.TableName);
            sw.WriteLine("\t\t{");
            sw.WriteLine("\t\t\t[SapIgnore]");
            sw.WriteLine("\t\t\t[ScriptIgnore]");
            sw.WriteLine("\t\t\tpublic ISapConnection SAPConnection { get; set; }");
            sw.WriteLine("");
            sw.WriteLine("\t\t\t[SapIgnore]");
            sw.WriteLine("\t\t\t[ScriptIgnore]");
            sw.WriteLine("\t\t\tpublic IDynSapProxyFactory DynSapProxyFactory { get; set; }");
            sw.WriteLine();
            foreach (var objColumn in tbl.Columns)
            {
                var column = (DataColumn) objColumn;
                var columnType = DbColumnTypeToCsharp(column);

                sw.WriteLine("\t\t\tpublic {0} {1} {{ get; set; }}", columnType, column.ColumnName);
                sw.WriteLine();
            }

            sw.WriteLine("\t\t\tpublic static {0} Create(DataRow row, ISapConnection sapConnection = null, IDynSapProxyFactory dynSapProxyFactory = null)", tbl.TableName);
            sw.WriteLine("\t\t\t{");
            sw.WriteLine("\t\t\t\tvar o = new {0}", tbl.TableName);
            sw.WriteLine("\t\t\t\t{");
            foreach (var objColumn in tbl.Columns)
            {
                var column = (DataColumn) objColumn;
                var columnType = DbColumnTypeToCsharp(column);

                switch (column.DataType.Name)
                {
                    case "DateTime":
                        sw.WriteLine("\t\t\t\t\t{0} = (string.IsNullOrEmpty(row[\"{0}\"].ToString())) ? null : ({1})row[\"{0}\"],", column.ColumnName, columnType);
                        break;
                    case "Int32":
                        sw.WriteLine("\t\t\t\t\t{0} = (string.IsNullOrEmpty(row[\"{0}\"].ToString())) ? null : ({1})Convert.ToInt32(row[\"{0}\"]),", column.ColumnName, columnType);
                        break;
                    default:
                        sw.WriteLine("\t\t\t\t\t{0} = ({1})row[\"{0}\"],", column.ColumnName, columnType);
                        break;
                }
            }
            sw.WriteLine();
            sw.WriteLine("\t\t\t\t\tSAPConnection = sapConnection,");
            sw.WriteLine("\t\t\t\t\tDynSapProxyFactory = dynSapProxyFactory,");

            sw.WriteLine("\t\t\t\t};");
            sw.WriteLine("\t\t\t\to.OnInitFromSap();");
            sw.WriteLine("\t\t\t\treturn o;");
            sw.WriteLine("\t\t\t}");

            sw.WriteLine();
            sw.WriteLine("\t\t\tpartial void OnInitFromSap();");

            sw.WriteLine();
            sw.WriteLine("\t\t\tpartial void OnInitFromExtern();");

            sw.WriteLine();
            sw.WriteLine("\t\t\tpublic void OnModelMappingApplied()");
            sw.WriteLine("\t\t\t{");
            sw.WriteLine("\t\t\t\tOnInitFromExtern();");
            sw.WriteLine("\t\t\t}");

            sw.WriteLine();
            sw.WriteLine("\t\t\tpublic static IEnumerable<{0}> Select(DataTable dt, ISapConnection sapConnection = null)", tbl.TableName);
            sw.WriteLine("\t\t\t{");
            sw.WriteLine("\t\t\t\treturn dt.AsEnumerable().Select(r => Create(r, sapConnection));");
            sw.WriteLine("\t\t\t}");
            sw.WriteLine();
            sw.WriteLine("\t\t\tpublic static List<{0}> ToList(DataTable dt, ISapConnection sapConnection = null)", tbl.TableName);
            sw.WriteLine("\t\t\t{");
            sw.WriteLine("\t\t\t\treturn Select(dt, sapConnection).ToListOrEmptyList();");
            sw.WriteLine("\t\t\t}");

            sw.WriteLine();
            sw.WriteLine("\t\t\tpublic static IEnumerable<{0}> Select(IEnumerable<DataTable> dts, ISapConnection sapConnection = null)", tbl.TableName);
            sw.WriteLine("\t\t\t{");
            sw.WriteLine("\t\t\t\tvar tbl = dts.FirstOrDefault(t => t.TableName.ToLower() == typeof({0}).Name.ToLower());", tbl.TableName);
            sw.WriteLine("\t\t\t\tif (tbl == null)");
            sw.WriteLine("\t\t\t\t\treturn null;");
            sw.WriteLine();
            sw.WriteLine("\t\t\t\treturn Select(tbl, sapConnection);");
            sw.WriteLine("\t\t\t}");
            sw.WriteLine();
            sw.WriteLine("\t\t\tpublic static List<{0}> ToList(IEnumerable<DataTable> dts, ISapConnection sapConnection = null)", tbl.TableName);
            sw.WriteLine("\t\t\t{");
            sw.WriteLine("\t\t\t\treturn Select(dts, sapConnection).ToListOrEmptyList();");
            sw.WriteLine("\t\t\t}");
            sw.WriteLine();
            sw.WriteLine("\t\t\tpublic static List<{0}> ToList(ISapDataService sapDataService)", tbl.TableName);
            sw.WriteLine("\t\t\t{");
            sw.WriteLine("\t\t\t\treturn ToList(sapDataService.GetExportTables(), sapDataService.SapConnection);");
            sw.WriteLine("\t\t\t}");
            sw.WriteLine();
            sw.WriteLine("\t\t\tpublic static List<{0}> GetExportListWithInitExecute(ISapDataService sapDataService, string inputParameterKeys = null, params object[] inputParameterValues)", tbl.TableName);
            sw.WriteLine("\t\t\t{");
            sw.WriteLine("\t\t\t\tif (sapDataService == null) ");
            sw.WriteLine("\t\t\t\t\treturn new List<{0}>();", tbl.TableName);
            sw.WriteLine("\t\t\t\t ");
            sw.WriteLine("\t\t\t\tvar dts = sapDataService.GetExportTablesWithInitExecute(\"" + SapFunction + "\", inputParameterKeys, inputParameterValues);");
            sw.WriteLine("\t\t\t\t ");
            sw.WriteLine("\t\t\t\treturn Select(dts, sapDataService.SapConnection).ToListOrEmptyList();");
            sw.WriteLine("\t\t\t}");
            sw.WriteLine();
            sw.WriteLine("\t\t\tpublic static List<{0}> GetExportListWithExecute(ISapDataService sapDataService)", tbl.TableName);
            sw.WriteLine("\t\t\t{");
            sw.WriteLine("\t\t\t\tif (sapDataService == null) ");
            sw.WriteLine("\t\t\t\t\treturn new List<{0}>();", tbl.TableName);
            sw.WriteLine("\t\t\t\t ");
            sw.WriteLine("\t\t\t\tvar dts = sapDataService.GetExportTablesWithExecute();");
            sw.WriteLine("\t\t\t\t ");
            sw.WriteLine("\t\t\t\treturn Select(dts, sapDataService.SapConnection).ToListOrEmptyList();");
            sw.WriteLine("\t\t\t}");
            sw.WriteLine(); 
            sw.WriteLine("\t\t\tpublic static List<{0}> GetExportList(ISapDataService sapDataService)", tbl.TableName);
            sw.WriteLine("\t\t\t{");
            sw.WriteLine("\t\t\t\tif (sapDataService == null) ");
            sw.WriteLine("\t\t\t\t\treturn new List<{0}>();", tbl.TableName);
            sw.WriteLine("\t\t\t\t ");
            sw.WriteLine("\t\t\t\tvar dts = sapDataService.GetExportTables();");
            sw.WriteLine("\t\t\t\t ");
            sw.WriteLine("\t\t\t\treturn Select(dts, sapDataService.SapConnection).ToListOrEmptyList();");
            sw.WriteLine("\t\t\t}");
            sw.WriteLine();
            sw.WriteLine("\t\t\tpublic static List<{0}> GetImportListWithInit(ISapDataService sapDataService, string inputParameterKeys = null, params object[] inputParameterValues)", tbl.TableName);
            sw.WriteLine("\t\t\t{");
            sw.WriteLine("\t\t\t\tif (sapDataService == null) ");
            sw.WriteLine("\t\t\t\t\treturn new List<{0}>();", tbl.TableName);
            sw.WriteLine("\t\t\t\t ");
            sw.WriteLine("\t\t\t\tvar dts = sapDataService.GetImportTablesWithInit(\"" + SapFunction + "\", inputParameterKeys, inputParameterValues);");
            sw.WriteLine("\t\t\t\t ");
            sw.WriteLine("\t\t\t\treturn Select(dts, sapDataService.SapConnection).ToListOrEmptyList();");
            sw.WriteLine("\t\t\t}");
            sw.WriteLine();
            sw.WriteLine("\t\t\tpublic static List<{0}> GetImportList(ISapDataService sapDataService)", tbl.TableName);
            sw.WriteLine("\t\t\t{");
            sw.WriteLine("\t\t\t\tif (sapDataService == null) ");
            sw.WriteLine("\t\t\t\t\treturn new List<{0}>();", tbl.TableName);
            sw.WriteLine("\t\t\t\t ");
            sw.WriteLine("\t\t\t\tvar dts = sapDataService.GetImportTables();");
            sw.WriteLine("\t\t\t\t ");
            sw.WriteLine("\t\t\t\treturn Select(dts, sapDataService.SapConnection).ToListOrEmptyList();");
            sw.WriteLine("\t\t\t}");
            sw.WriteLine("\t\t}");
        }

        public void WriteOrmForExportExtensionMethods(StreamWriter sw, DataTable tbl)
        {
            sw.WriteLine("");
            sw.WriteLine("\t\tpublic static DataTable ToTable(this IEnumerable<{0}.{1}> list)", SapFunction, tbl.TableName);
            sw.WriteLine("\t\t{");
            sw.WriteLine("\t\t\treturn SapDataServiceExtensions.ToTable(list);");
            sw.WriteLine("\t\t}");
            sw.WriteLine("");
            sw.WriteLine("\t\tpublic static void Apply(this IEnumerable<{0}.{1}> list, DataTable dtDst)", SapFunction, tbl.TableName);
            sw.WriteLine("\t\t{");
            sw.WriteLine("\t\t\tSapDataServiceExtensions.Apply(list, dtDst);");
            sw.WriteLine("\t\t}");
            sw.WriteLine("");
        }

        static string DbColumnTypeToCsharp(DataColumn column)
        {
            var nullablePostfix = "";

            if (column.AllowDBNull && false == column.DataType.Name.ToLower().Contains("string"))
                nullablePostfix = "?";

            var dataType = column.DataType.Name;
            dataType = dataType.Replace("System.", "");
            dataType = dataType.Replace("String", "string");
            dataType = dataType.Replace("Decimal", "decimal");

            return string.Format("{0}{1}", dataType, nullablePostfix);
        }
    }
}
